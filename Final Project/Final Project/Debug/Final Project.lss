
Final Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  00000284  00000318  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000284  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  0080013a  0080013a  00000352  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000352  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000384  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  000003c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000be7  00000000  00000000  00000448  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007a7  00000000  00000000  0000102f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008ca  00000000  00000000  000017d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c8  00000000  00000000  000020a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007983  00000000  00000000  00002168  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000183  00000000  00000000  00009aeb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00009c6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000005f2  00000000  00000000  00009cee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	4c c0       	rjmp	.+152    	; 0x9e <__bad_interrupt>
   6:	00 00       	nop
   8:	4a c0       	rjmp	.+148    	; 0x9e <__bad_interrupt>
   a:	00 00       	nop
   c:	48 c0       	rjmp	.+144    	; 0x9e <__bad_interrupt>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	40 c0       	rjmp	.+128    	; 0x9e <__bad_interrupt>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	3c c0       	rjmp	.+120    	; 0x9e <__bad_interrupt>
  26:	00 00       	nop
  28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	38 c0       	rjmp	.+112    	; 0x9e <__bad_interrupt>
  2e:	00 00       	nop
  30:	36 c0       	rjmp	.+108    	; 0x9e <__bad_interrupt>
  32:	00 00       	nop
  34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
  36:	00 00       	nop
  38:	32 c0       	rjmp	.+100    	; 0x9e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	2a c0       	rjmp	.+84     	; 0x9e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	28 c0       	rjmp	.+80     	; 0x9e <__bad_interrupt>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	24 c0       	rjmp	.+72     	; 0x9e <__bad_interrupt>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e8       	ldi	r30, 0x84	; 132
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <DIDR1+0x5>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 33       	cpi	r26, 0x3A	; 58
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <DIDR1+0x1>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e3       	ldi	r26, 0x3A	; 58
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 34       	cpi	r26, 0x41	; 65
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	d3 d0       	rcall	.+422    	; 0x242 <main>
  9c:	f1 c0       	rjmp	.+482    	; 0x280 <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <Mega328P_Init>:
.set	temp,0					;sets the temp assembly variable to 0

.section ".text"				;start of the text section
.global Mega328P_Init
Mega328P_Init:
		ldi	r16,0x07			;PB0(R*W),PB1(RS),PB2(E) as fixed outputs
  a0:	07 e0       	ldi	r16, 0x07	; 7
		out	DDRB,r16			;Sets Pins 0, 1, and 2 as outputs
  a2:	04 b9       	out	0x04, r16	; 4
		ldi	r16,0			    ;R16 cleared to put out to port B
  a4:	00 e0       	ldi	r16, 0x00	; 0
		out	PORTB,r16			;Clears any data in I/O port B
  a6:	05 b9       	out	0x05, r16	; 5
		out	U2X0,r16	   		;initialize UART, 8bits, no parity, 1 stop, 9600
  a8:	01 b9       	out	0x01, r16	; 1
		ldi	r17,0x0		  		;storing the value of the high byte for 9600 Baud rate
  aa:	10 e0       	ldi	r17, 0x00	; 0
		ldi	r16,0x67			;storing the value of the low byte for 9600 Baud rate
  ac:	07 e6       	ldi	r16, 0x67	; 103
		sts	UBRR0H,r17			;setting the high byte for Baud rate
  ae:	10 93 c5 00 	sts	0x00C5, r17	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
		sts	UBRR0L,r16			;setting the low byte for Baud rate
  b2:	00 93 c4 00 	sts	0x00C4, r16	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
		ldi	r16,24		  		;value to enable the receiver and transmitter
  b6:	08 e1       	ldi	r16, 0x18	; 24
		sts	UCSR0B,r16			;enabling the receiver and transmitter
  b8:	00 93 c1 00 	sts	0x00C1, r16	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
		ldi	r16,6			    ;storing the value to set the character size to 8-bits
  bc:	06 e0       	ldi	r16, 0x06	; 6
		sts	UCSR0C,r16			;setting the character size to 8-bits
  be:	00 93 c2 00 	sts	0x00C2, r16	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
		ldi r16,0xFE			;sets which ADC pins have their digital input buffer disabled
  c2:	0e ef       	ldi	r16, 0xFE	; 254
		sts DIDR0,r16	  		;disables all ADC pins except for ADC0D
  c4:	00 93 7e 00 	sts	0x007E, r16	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
		ldi r16,0xFF	  		;determines which AINx pins to disable
  c8:	0f ef       	ldi	r16, 0xFF	; 255
		sts DIDR1,r16	  		;disables both AINx pins
  ca:	00 93 7f 00 	sts	0x007F, r16	; 0x80007f <__TEXT_REGION_LENGTH__+0x7e007f>
		ret				      	;return from subroutine
  ce:	08 95       	ret

000000d0 <Detect_Press>:
	

.global Detect_Press
Detect_Press:
	ldi		r16,1
  d0:	01 e0       	ldi	r16, 0x01	; 1
	sbis	PINB,7
  d2:	1f 9b       	sbis	0x03, 7	; 3
	sts		ASCII,r16
  d4:	00 93 3e 01 	sts	0x013E, r16	; 0x80013e <ASCII>
	ret
  d8:	08 95       	ret

000000da <LCD_Write_Command>:

.global LCD_Write_Command
LCD_Write_Command:
	call	UART_Off			;turns off UART
  da:	31 d0       	rcall	.+98     	; 0x13e <UART_Off>
	ldi		r16,0xFF			;PD0 - PD7 as outputs
  dc:	0f ef       	ldi	r16, 0xFF	; 255
	out		DDRD,r16			;sets pins 0-7 as outputs
  de:	0a b9       	out	0x0a, r16	; 10
	lds		r16,DATA			;loads the contents of the DATA variable that contain the LCD command
  e0:	00 91 3b 01 	lds	r16, 0x013B	; 0x80013b <DATA>
	out		PORTD,r16			;outputs the contents of the DATA variable to port D
  e4:	0b b9       	out	0x0b, r16	; 11
	ldi		r16,4			    ;sets the output to not display on the LCD
  e6:	04 e0       	ldi	r16, 0x04	; 4
	out		PORTB,r16			;output does not display on the LCD
	call	LCD_Delay			;delays the program
  e8:	05 b9       	out	0x05, r16	; 5
  ea:	04 d0       	rcall	.+8      	; 0xf4 <LCD_Delay>
	ldi		r16,0			    ;clears the data in port B
	out		PORTB,r16			;port B cleared
	call	LCD_Delay			;delays the program
  ec:	00 e0       	ldi	r16, 0x00	; 0
  ee:	05 b9       	out	0x05, r16	; 5
	call	UART_On				;re-enables UART
  f0:	01 d0       	rcall	.+2      	; 0xf4 <LCD_Delay>
  f2:	1f c0       	rjmp	.+62     	; 0x132 <UART_On>

000000f4 <LCD_Delay>:
	ret						    ;return from subroutine
  f4:	0a ef       	ldi	r16, 0xFA	; 250

000000f6 <D0>:

LCD_Delay:
	ldi		r16,0xFA			;sets a high value for the delay
  f6:	1f ef       	ldi	r17, 0xFF	; 255

000000f8 <D1>:
D0:	ldi		r17,0xFF			;sets a high value for the delay
  f8:	1a 95       	dec	r17
D1:	dec		r17					;decrements r17 continuously until 0 to create delay
  fa:	f1 f7       	brne	.-4      	; 0xf8 <D1>
	brne	D1				    ;loops back to decrement r17 until 0
	dec		r16			  		;decrements r16 continuously until 0 to create delay
  fc:	0a 95       	dec	r16
	brne	D0			  		;loops back to decrement r16 until 0
  fe:	d9 f7       	brne	.-10     	; 0xf6 <D0>
	ret						    ;return from subroutine
 100:	08 95       	ret

00000102 <LCD_Write_Data>:

.global LCD_Write_Data
LCD_Write_Data:
	call	UART_Off			;turns off UART
 102:	1d d0       	rcall	.+58     	; 0x13e <UART_Off>
 104:	0f ef       	ldi	r16, 0xFF	; 255
	ldi		r16,0xFF			;PD0 - PD7 as outputs
 106:	0a b9       	out	0x0a, r16	; 10
	out		DDRD,r16			;sets pins 0-7 as outputs
 108:	00 91 3b 01 	lds	r16, 0x013B	; 0x80013b <DATA>
	lds		r16,DATA			;loads the contents of the DATA variable that contain the output
	out		PORTD,r16			;outputs the contents of the DATA variable to port D
 10c:	0b b9       	out	0x0b, r16	; 11
	ldi		r16,6			    ;sets the output needed for the LCD to output to the screen
	out		PORTB,r16			;registers that the data from port D is to be outputted to the screen
	call	LCD_Delay			;delays the program
 10e:	06 e0       	ldi	r16, 0x06	; 6
	ldi		r16,0			    ;clears the data in port B
 110:	05 b9       	out	0x05, r16	; 5
	out		PORTB,r16			;port B cleared
 112:	f0 df       	rcall	.-32     	; 0xf4 <LCD_Delay>
	call	LCD_Delay			;delays the program
 114:	00 e0       	ldi	r16, 0x00	; 0
 116:	05 b9       	out	0x05, r16	; 5
	call	UART_On				;re-enables UART
 118:	ed df       	rcall	.-38     	; 0xf4 <LCD_Delay>
 11a:	0b c0       	rjmp	.+22     	; 0x132 <UART_On>
	ret						    ;return from subroutine
 11c:	08 95       	ret

0000011e <LCD_Read_Data>:

.global LCD_Read_Data
LCD_Read_Data:
	call	UART_Off			;turns off UART
 11e:	0f d0       	rcall	.+30     	; 0x13e <UART_Off>
	ldi		r16,0x00			;PD0 - PD7 as inputs
 120:	00 e0       	ldi	r16, 0x00	; 0
	out		DDRD,r16			;sets pins 0-7 as inputs
 122:	0a b9       	out	0x0a, r16	; 10
	out		PORTB,4				;LCD does not display anything onto the screen
 124:	45 b8       	out	0x05, r4	; 5
	in		r16,PORTD			;stores the data in port D to r16
 126:	0b b1       	in	r16, 0x0b	; 11
	sts		DATA,r16			;stores that data in the DATA variable
 128:	00 93 3b 01 	sts	0x013B, r16	; 0x80013b <DATA>
	out		PORTB,0				;clears port B
 12c:	05 b8       	out	0x05, r0	; 5
	call	UART_On				;re-enables UART
 12e:	01 c0       	rjmp	.+2      	; 0x132 <UART_On>
 130:	08 95       	ret

00000132 <UART_On>:
	ret						    ;return from subroutine
 132:	02 e0       	ldi	r16, 0x02	; 2

.global UART_On
UART_On:
	ldi		r16,2				;load 2 into r16
 134:	0a b9       	out	0x0a, r16	; 10
	out		DDRD,r16			;sets direction of port d to 2
 136:	08 e1       	ldi	r16, 0x18	; 24
	ldi		r16,24				;loads 24 into r16
 138:	00 93 c1 00 	sts	0x00C1, r16	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	sts		UCSR0B,r16			;store r16 content into USCR0B
 13c:	08 95       	ret

0000013e <UART_Off>:
	ret							;return from subroutine
 13e:	00 e0       	ldi	r16, 0x00	; 0

.global UART_Off
UART_Off:
	ldi	r16,0					;loads 0 (or low) into r16
 140:	00 93 c1 00 	sts	0x00C1, r16	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	sts UCSR0B,r16				;loads contents of r16 into UCSR0B in other words sets 
 144:	08 95       	ret

00000146 <UART_Clear>:
									;UCSR0B to low which turns off UART
	ret							;return from subroutine
 146:	00 91 c0 00 	lds	r16, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>

.global UART_Clear
UART_Clear:
	lds		r16,UCSR0A			;load UCSR0A into r16
 14a:	07 ff       	sbrs	r16, 7
	sbrs	r16,RXC0			;skip the following return instruction if RXC0 bit is set in r16
 14c:	08 95       	ret
	ret							;return from subroutine when RXC0 is not set
 14e:	00 91 c6 00 	lds	r16, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	lds		r16,UDR0			;if previous return did not occur load UDR0 into r16 and try again
 152:	f9 cf       	rjmp	.-14     	; 0x146 <UART_Clear>

00000154 <UART_Get>:
	rjmp	UART_Clear			;loop over UART_Clear
 154:	00 91 c0 00 	lds	r16, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>

.global UART_Get
UART_Get:
	lds		r16,UCSR0A			;retrieves the status register that checks if there is data in the buffer
 158:	07 ff       	sbrs	r16, 7
	sbrs	r16,RXC0			;skips the next instruction if there is data in the buffer
 15a:	fc cf       	rjmp	.-8      	; 0x154 <UART_Get>
	rjmp	UART_Get			;loops the data retrieval function until there is data in the buffer
 15c:	00 91 c6 00 	lds	r16, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	lds		r16,UDR0			;stores the data in the buffer in r16
 160:	00 93 3e 01 	sts	0x013E, r16	; 0x80013e <ASCII>
	sts		ASCII,r16			;stores the register data into the address pointed to by ASCII
 164:	08 95       	ret

00000166 <UART_Put>:
	ret							;return from subroutine
 166:	10 91 c0 00 	lds	r17, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>

.global UART_Put
UART_Put:
	lds		r17,UCSR0A			;store USCR0A (control status register A) into r17
 16a:	15 ff       	sbrs	r17, 5
	sbrs	r17,UDRE0			;if the UART data register empty bit is set then skip the following
 16c:	fc cf       	rjmp	.-8      	; 0x166 <UART_Put>
									;relative jump instruction
	rjmp	UART_Put			;if the UART data register empty bit is not set loop back
 16e:	00 91 3e 01 	lds	r16, 0x013E	; 0x80013e <ASCII>
									;through UART_Put 
	lds		r16,ASCII			;load what is stored in ASCII to r16
 172:	00 93 c6 00 	sts	0x00C6, r16	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	sts		UDR0,r16			;store value in r16 to UDR0
 176:	08 95       	ret

00000178 <LCD_Puts>:
	ret							;return from subroutine
 178:	cf 93       	push	r28
		case 'L':
		LCD();
		break;
		case 'u':
		case 'U':
		USART();
 17a:	df 93       	push	r29
 17c:	ec 01       	movw	r28, r24
 17e:	98 81       	ld	r25, Y
 180:	99 23       	and	r25, r25
 182:	39 f0       	breq	.+14     	; 0x192 <LCD_Puts+0x1a>
 184:	21 96       	adiw	r28, 0x01	; 1
 186:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <DATA>
 18a:	bb df       	rcall	.-138    	; 0x102 <LCD_Write_Data>
 18c:	99 91       	ld	r25, Y+
 18e:	91 11       	cpse	r25, r1
 190:	fa cf       	rjmp	.-12     	; 0x186 <LCD_Puts+0xe>
 192:	df 91       	pop	r29
 194:	cf 91       	pop	r28
 196:	08 95       	ret

00000198 <LCD>:
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
 19c:	84 e3       	ldi	r24, 0x34	; 52
 19e:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <DATA>
 1a2:	9b df       	rcall	.-202    	; 0xda <LCD_Write_Command>
 1a4:	88 e0       	ldi	r24, 0x08	; 8
 1a6:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <DATA>
 1aa:	97 df       	rcall	.-210    	; 0xda <LCD_Write_Command>
 1ac:	c2 e0       	ldi	r28, 0x02	; 2
 1ae:	c0 93 3b 01 	sts	0x013B, r28	; 0x80013b <DATA>
 1b2:	93 df       	rcall	.-218    	; 0xda <LCD_Write_Command>
 1b4:	86 e0       	ldi	r24, 0x06	; 6
 1b6:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <DATA>
 1ba:	8f df       	rcall	.-226    	; 0xda <LCD_Write_Command>
 1bc:	8f e0       	ldi	r24, 0x0F	; 15
 1be:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <DATA>
 1c2:	8b df       	rcall	.-234    	; 0xda <LCD_Write_Command>
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	91 e0       	ldi	r25, 0x01	; 1
 1c8:	d7 df       	rcall	.-82     	; 0x178 <LCD_Puts>
 1ca:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <ASCII>
 1ce:	c8 b9       	out	0x08, r28	; 8
 1d0:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <ASCII>
 1d4:	81 11       	cpse	r24, r1
 1d6:	30 c0       	rjmp	.+96     	; 0x238 <LCD+0xa0>
 1d8:	c8 e1       	ldi	r28, 0x18	; 24
 1da:	d2 e0       	ldi	r29, 0x02	; 2
 1dc:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <count+0x1>
 1e0:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <count>
 1e4:	75 df       	rcall	.-278    	; 0xd0 <Detect_Press>
 1e6:	c0 93 3b 01 	sts	0x013B, r28	; 0x80013b <DATA>
 1ea:	77 df       	rcall	.-274    	; 0xda <LCD_Write_Command>
 1ec:	2f ef       	ldi	r18, 0xFF	; 255
 1ee:	83 ec       	ldi	r24, 0xC3	; 195
 1f0:	99 e0       	ldi	r25, 0x09	; 9
 1f2:	21 50       	subi	r18, 0x01	; 1
 1f4:	80 40       	sbci	r24, 0x00	; 0
 1f6:	90 40       	sbci	r25, 0x00	; 0
 1f8:	e1 f7       	brne	.-8      	; 0x1f2 <LCD+0x5a>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <LCD+0x64>
 1fc:	00 00       	nop
 1fe:	68 df       	rcall	.-304    	; 0xd0 <Detect_Press>
 200:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <ASCII>
 204:	88 23       	and	r24, r24
 206:	31 f0       	breq	.+12     	; 0x214 <LCD+0x7c>
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	88 b9       	out	0x08, r24	; 8
 20c:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <DATA>
 210:	64 df       	rcall	.-312    	; 0xda <LCD_Write_Command>
 212:	14 c0       	rjmp	.+40     	; 0x23c <LCD+0xa4>
 214:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <count>
 218:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <count+0x1>
 21c:	01 96       	adiw	r24, 0x01	; 1
 21e:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <count+0x1>
 222:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <count>
 226:	88 97       	sbiw	r24, 0x28	; 40
 228:	e8 f2       	brcs	.-70     	; 0x1e4 <LCD+0x4c>
 22a:	d0 93 3b 01 	sts	0x013B, r29	; 0x80013b <DATA>
 22e:	55 df       	rcall	.-342    	; 0xda <LCD_Write_Command>
 230:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <ASCII>
 234:	88 23       	and	r24, r24
 236:	91 f2       	breq	.-92     	; 0x1dc <LCD+0x44>
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	88 b9       	out	0x08, r24	; 8
 23c:	df 91       	pop	r29
 23e:	cf 91       	pop	r28
 240:	08 95       	ret

00000242 <main>:
* main
*/

int main(void)
{
	Mega328P_Init();
 242:	2e df       	rcall	.-420    	; 0xa0 <Mega328P_Init>
unsigned char lAddress;			//low byte of address used in EEPROM
unsigned char content;			//content to write in EEPROM
unsigned int count;				//counter variable

void LED_Init(void) {
	DDRC = 0x03;
 244:	83 e0       	ldi	r24, 0x03	; 3
{
	Mega328P_Init();
	LED_Init();

	int isRed = 0;
	LCD();
 246:	87 b9       	out	0x07, r24	; 7
 248:	a7 df       	rcall	.-178    	; 0x198 <LCD>
	while (!(PINB & (1<<7))) {}
 24a:	1f 9b       	sbis	0x03, 7	; 3
 24c:	fe cf       	rjmp	.-4      	; 0x24a <main+0x8>
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	90 e0       	ldi	r25, 0x00	; 0
	PORTC = 0x01;
	return;
}

void Incorrect(void) {	
	PORTC = 0x02;
 252:	42 e0       	ldi	r20, 0x02	; 2
				Correct();
				isRed = 0;
			}
			else if (isRed == 0) {
				Incorrect();
				isRed = 1;
 254:	31 e0       	ldi	r19, 0x01	; 1
 256:	20 e0       	ldi	r18, 0x00	; 0
	DDRC = 0x03;
	return;
}

void Correct(void) {
	PORTC = 0x01;
 258:	71 e0       	ldi	r23, 0x01	; 1
	while (1)
	{
		if (!(PINB & (1<<7))) {
			if (isRed == 1) {
				Correct();
				isRed = 0;
 25a:	60 e0       	ldi	r22, 0x00	; 0
 25c:	50 e0       	ldi	r21, 0x00	; 0
	int isRed = 0;
	LCD();
	while (!(PINB & (1<<7))) {}
	while (1)
	{
		if (!(PINB & (1<<7))) {
 25e:	1f 99       	sbic	0x03, 7	; 3
 260:	fe cf       	rjmp	.-4      	; 0x25e <main+0x1c>
			if (isRed == 1) {
 262:	81 30       	cpi	r24, 0x01	; 1
 264:	91 05       	cpc	r25, r1
 266:	21 f4       	brne	.+8      	; 0x270 <main+0x2e>
	DDRC = 0x03;
	return;
}

void Correct(void) {
	PORTC = 0x01;
 268:	78 b9       	out	0x08, r23	; 8
	while (1)
	{
		if (!(PINB & (1<<7))) {
			if (isRed == 1) {
				Correct();
				isRed = 0;
 26a:	86 2f       	mov	r24, r22
 26c:	95 2f       	mov	r25, r21
 26e:	05 c0       	rjmp	.+10     	; 0x27a <main+0x38>
			}
			else if (isRed == 0) {
 270:	00 97       	sbiw	r24, 0x00	; 0
 272:	19 f4       	brne	.+6      	; 0x27a <main+0x38>
	PORTC = 0x01;
	return;
}

void Incorrect(void) {	
	PORTC = 0x02;
 274:	48 b9       	out	0x08, r20	; 8
				Correct();
				isRed = 0;
			}
			else if (isRed == 0) {
				Incorrect();
				isRed = 1;
 276:	83 2f       	mov	r24, r19
 278:	92 2f       	mov	r25, r18
			}
			while (!(PINB & (1<<7))) {}
 27a:	1f 9b       	sbis	0x03, 7	; 3
 27c:	fe cf       	rjmp	.-4      	; 0x27a <main+0x38>
 27e:	ef cf       	rjmp	.-34     	; 0x25e <main+0x1c>

00000280 <_exit>:
 280:	f8 94       	cli

00000282 <__stop_program>:
 282:	ff cf       	rjmp	.-2      	; 0x282 <__stop_program>
