
TinyOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000506  00800100  00000dd4  00000e68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000dd4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  00800606  00800606  0000136e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000136e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000013a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  000013e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013ac  00000000  00000000  00001490  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000084d  00000000  00000000  0000283c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b9d  00000000  00000000  00003089  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000150  00000000  00000000  00003c28  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000047f0  00000000  00000000  00003d78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002d6  00000000  00000000  00008568  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  0000883e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000141f  00000000  00000000  000088be  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	e1 c0       	rjmp	.+450    	; 0x1c4 <__ctors_end>
   2:	00 00       	nop
   4:	fa c0       	rjmp	.+500    	; 0x1fa <__bad_interrupt>
   6:	00 00       	nop
   8:	f8 c0       	rjmp	.+496    	; 0x1fa <__bad_interrupt>
   a:	00 00       	nop
   c:	f6 c0       	rjmp	.+492    	; 0x1fa <__bad_interrupt>
   e:	00 00       	nop
  10:	f4 c0       	rjmp	.+488    	; 0x1fa <__bad_interrupt>
  12:	00 00       	nop
  14:	f2 c0       	rjmp	.+484    	; 0x1fa <__bad_interrupt>
  16:	00 00       	nop
  18:	f0 c0       	rjmp	.+480    	; 0x1fa <__bad_interrupt>
  1a:	00 00       	nop
  1c:	ee c0       	rjmp	.+476    	; 0x1fa <__bad_interrupt>
  1e:	00 00       	nop
  20:	ec c0       	rjmp	.+472    	; 0x1fa <__bad_interrupt>
  22:	00 00       	nop
  24:	ea c0       	rjmp	.+468    	; 0x1fa <__bad_interrupt>
  26:	00 00       	nop
  28:	e8 c0       	rjmp	.+464    	; 0x1fa <__bad_interrupt>
  2a:	00 00       	nop
  2c:	e6 c0       	rjmp	.+460    	; 0x1fa <__bad_interrupt>
  2e:	00 00       	nop
  30:	e4 c0       	rjmp	.+456    	; 0x1fa <__bad_interrupt>
  32:	00 00       	nop
  34:	e2 c0       	rjmp	.+452    	; 0x1fa <__bad_interrupt>
  36:	00 00       	nop
  38:	e0 c0       	rjmp	.+448    	; 0x1fa <__bad_interrupt>
  3a:	00 00       	nop
  3c:	de c0       	rjmp	.+444    	; 0x1fa <__bad_interrupt>
  3e:	00 00       	nop
  40:	dc c0       	rjmp	.+440    	; 0x1fa <__bad_interrupt>
  42:	00 00       	nop
  44:	da c0       	rjmp	.+436    	; 0x1fa <__bad_interrupt>
  46:	00 00       	nop
  48:	d8 c0       	rjmp	.+432    	; 0x1fa <__bad_interrupt>
  4a:	00 00       	nop
  4c:	d6 c0       	rjmp	.+428    	; 0x1fa <__bad_interrupt>
  4e:	00 00       	nop
  50:	d4 c0       	rjmp	.+424    	; 0x1fa <__bad_interrupt>
  52:	00 00       	nop
  54:	d2 c0       	rjmp	.+420    	; 0x1fa <__bad_interrupt>
  56:	00 00       	nop
  58:	d0 c0       	rjmp	.+416    	; 0x1fa <__bad_interrupt>
  5a:	00 00       	nop
  5c:	ce c0       	rjmp	.+412    	; 0x1fa <__bad_interrupt>
  5e:	00 00       	nop
  60:	cc c0       	rjmp	.+408    	; 0x1fa <__bad_interrupt>
  62:	00 00       	nop
  64:	ca c0       	rjmp	.+404    	; 0x1fa <__bad_interrupt>
  66:	00 00       	nop
  68:	48 03       	fmul	r20, r16
  6a:	40 03       	mulsu	r20, r16
  6c:	40 03       	mulsu	r20, r16
  6e:	40 03       	mulsu	r20, r16
  70:	40 03       	mulsu	r20, r16
  72:	40 03       	mulsu	r20, r16
  74:	40 03       	mulsu	r20, r16
  76:	40 03       	mulsu	r20, r16
  78:	40 03       	mulsu	r20, r16
  7a:	40 03       	mulsu	r20, r16
  7c:	40 03       	mulsu	r20, r16
  7e:	40 03       	mulsu	r20, r16
  80:	40 03       	mulsu	r20, r16
  82:	40 03       	mulsu	r20, r16
  84:	40 03       	mulsu	r20, r16
  86:	40 03       	mulsu	r20, r16
  88:	40 03       	mulsu	r20, r16
  8a:	40 03       	mulsu	r20, r16
  8c:	40 03       	mulsu	r20, r16
  8e:	40 03       	mulsu	r20, r16
  90:	40 03       	mulsu	r20, r16
  92:	40 03       	mulsu	r20, r16
  94:	40 03       	mulsu	r20, r16
  96:	40 03       	mulsu	r20, r16
  98:	40 03       	mulsu	r20, r16
  9a:	40 03       	mulsu	r20, r16
  9c:	40 03       	mulsu	r20, r16
  9e:	40 03       	mulsu	r20, r16
  a0:	40 03       	mulsu	r20, r16
  a2:	40 03       	mulsu	r20, r16
  a4:	40 03       	mulsu	r20, r16
  a6:	40 03       	mulsu	r20, r16
  a8:	40 03       	mulsu	r20, r16
  aa:	40 03       	mulsu	r20, r16
  ac:	40 03       	mulsu	r20, r16
  ae:	40 03       	mulsu	r20, r16
  b0:	40 03       	mulsu	r20, r16
  b2:	40 03       	mulsu	r20, r16
  b4:	1c 03       	fmul	r17, r20
  b6:	22 03       	mulsu	r18, r18
  b8:	28 03       	fmul	r18, r16
  ba:	2e 03       	fmul	r18, r22
  bc:	34 03       	mulsu	r19, r20
  be:	3a 03       	fmul	r19, r18
  c0:	40 03       	mulsu	r20, r16
  c2:	40 03       	mulsu	r20, r16
  c4:	40 03       	mulsu	r20, r16
  c6:	40 03       	mulsu	r20, r16
  c8:	40 03       	mulsu	r20, r16
  ca:	40 03       	mulsu	r20, r16
  cc:	40 03       	mulsu	r20, r16
  ce:	40 03       	mulsu	r20, r16
  d0:	40 03       	mulsu	r20, r16
  d2:	40 03       	mulsu	r20, r16
  d4:	40 03       	mulsu	r20, r16
  d6:	40 03       	mulsu	r20, r16
  d8:	40 03       	mulsu	r20, r16
  da:	40 03       	mulsu	r20, r16
  dc:	40 03       	mulsu	r20, r16
  de:	40 03       	mulsu	r20, r16
  e0:	40 03       	mulsu	r20, r16
  e2:	40 03       	mulsu	r20, r16
  e4:	40 03       	mulsu	r20, r16
  e6:	40 03       	mulsu	r20, r16
  e8:	40 03       	mulsu	r20, r16
  ea:	40 03       	mulsu	r20, r16
  ec:	40 03       	mulsu	r20, r16
  ee:	40 03       	mulsu	r20, r16
  f0:	40 03       	mulsu	r20, r16
  f2:	40 03       	mulsu	r20, r16
  f4:	1c 03       	fmul	r17, r20
  f6:	22 03       	mulsu	r18, r18
  f8:	28 03       	fmul	r18, r16
  fa:	2e 03       	fmul	r18, r22
  fc:	34 03       	mulsu	r19, r20
  fe:	3a 03       	fmul	r19, r18
 100:	39 04       	cpc	r3, r9
 102:	3f 04       	cpc	r3, r15
 104:	3f 04       	cpc	r3, r15
 106:	3f 04       	cpc	r3, r15
 108:	3b 04       	cpc	r3, r11
 10a:	3f 04       	cpc	r3, r15
 10c:	3f 04       	cpc	r3, r15
 10e:	3f 04       	cpc	r3, r15
 110:	3f 04       	cpc	r3, r15
 112:	3f 04       	cpc	r3, r15
 114:	3f 04       	cpc	r3, r15
 116:	37 04       	cpc	r3, r7
 118:	3f 04       	cpc	r3, r15
 11a:	3f 04       	cpc	r3, r15
 11c:	3f 04       	cpc	r3, r15
 11e:	3f 04       	cpc	r3, r15
 120:	3f 04       	cpc	r3, r15
 122:	3f 04       	cpc	r3, r15
 124:	3f 04       	cpc	r3, r15
 126:	3f 04       	cpc	r3, r15
 128:	3d 04       	cpc	r3, r13
 12a:	3f 04       	cpc	r3, r15
 12c:	3f 04       	cpc	r3, r15
 12e:	3f 04       	cpc	r3, r15
 130:	3f 04       	cpc	r3, r15
 132:	3f 04       	cpc	r3, r15
 134:	3f 04       	cpc	r3, r15
 136:	3f 04       	cpc	r3, r15
 138:	3f 04       	cpc	r3, r15
 13a:	3f 04       	cpc	r3, r15
 13c:	3f 04       	cpc	r3, r15
 13e:	3f 04       	cpc	r3, r15
 140:	39 04       	cpc	r3, r9
 142:	3f 04       	cpc	r3, r15
 144:	3f 04       	cpc	r3, r15
 146:	3f 04       	cpc	r3, r15
 148:	3b 04       	cpc	r3, r11
 14a:	3f 04       	cpc	r3, r15
 14c:	3f 04       	cpc	r3, r15
 14e:	3f 04       	cpc	r3, r15
 150:	3f 04       	cpc	r3, r15
 152:	3f 04       	cpc	r3, r15
 154:	3f 04       	cpc	r3, r15
 156:	37 04       	cpc	r3, r7
 158:	3f 04       	cpc	r3, r15
 15a:	3f 04       	cpc	r3, r15
 15c:	3f 04       	cpc	r3, r15
 15e:	3f 04       	cpc	r3, r15
 160:	3f 04       	cpc	r3, r15
 162:	3f 04       	cpc	r3, r15
 164:	3f 04       	cpc	r3, r15
 166:	3f 04       	cpc	r3, r15
 168:	3d 04       	cpc	r3, r13
 16a:	08 00       	.word	0x0008	; ????
 16c:	00 00       	nop
 16e:	be 92       	st	-X, r11
 170:	24 49       	sbci	r18, 0x94	; 148
 172:	12 3e       	cpi	r17, 0xE2	; 226
 174:	ab aa       	std	Y+51, r10	; 0x33
 176:	aa 2a       	or	r10, r26
 178:	be cd       	rjmp	.-1156   	; 0xfffffcf6 <__eeprom_end+0xff7efcf6>
 17a:	cc cc       	rjmp	.-1640   	; 0xfffffb14 <__eeprom_end+0xff7efb14>
 17c:	4c 3e       	cpi	r20, 0xEC	; 236
 17e:	00 00       	nop
 180:	00 80       	ld	r0, Z
 182:	be ab       	std	Y+54, r27	; 0x36
 184:	aa aa       	std	Y+50, r10	; 0x32
 186:	aa 3e       	cpi	r26, 0xEA	; 234
 188:	00 00       	nop
 18a:	00 00       	nop
 18c:	bf 00       	.word	0x00bf	; ????
 18e:	00 00       	nop
 190:	80 3f       	cpi	r24, 0xF0	; 240
 192:	00 00       	nop
 194:	00 00       	nop
 196:	00 08       	sbc	r0, r0
 198:	41 78       	andi	r20, 0x81	; 129
 19a:	d3 bb       	out	0x13, r29	; 19
 19c:	43 87       	std	Z+11, r20	; 0x0b
 19e:	d1 13       	cpse	r29, r17
 1a0:	3d 19       	sub	r19, r13
 1a2:	0e 3c       	cpi	r16, 0xCE	; 206
 1a4:	c3 bd       	out	0x23, r28	; 35
 1a6:	42 82       	std	Z+2, r4	; 0x02
 1a8:	ad 2b       	or	r26, r29
 1aa:	3e 68       	ori	r19, 0x8E	; 142
 1ac:	ec 82       	std	Y+4, r14	; 0x04
 1ae:	76 be       	out	0x36, r7	; 54
 1b0:	d9 8f       	std	Y+25, r29	; 0x19
 1b2:	e1 a9       	ldd	r30, Z+49	; 0x31
 1b4:	3e 4c       	sbci	r19, 0xCE	; 206
 1b6:	80 ef       	ldi	r24, 0xF0	; 240
 1b8:	ff be       	out	0x3f, r15	; 63
 1ba:	01 c4       	rjmp	.+2050   	; 0x9be <__divsf3_pse+0x46>
 1bc:	ff 7f       	andi	r31, 0xFF	; 255
 1be:	3f 00       	.word	0x003f	; ????
 1c0:	00 00       	nop
	...

000001c4 <__ctors_end>:
 1c4:	11 24       	eor	r1, r1
 1c6:	1f be       	out	0x3f, r1	; 63
 1c8:	cf ef       	ldi	r28, 0xFF	; 255
 1ca:	d8 e0       	ldi	r29, 0x08	; 8
 1cc:	de bf       	out	0x3e, r29	; 62
 1ce:	cd bf       	out	0x3d, r28	; 61

000001d0 <__do_copy_data>:
 1d0:	16 e0       	ldi	r17, 0x06	; 6
 1d2:	a0 e0       	ldi	r26, 0x00	; 0
 1d4:	b1 e0       	ldi	r27, 0x01	; 1
 1d6:	e4 ed       	ldi	r30, 0xD4	; 212
 1d8:	fd e0       	ldi	r31, 0x0D	; 13
 1da:	02 c0       	rjmp	.+4      	; 0x1e0 <__do_copy_data+0x10>
 1dc:	05 90       	lpm	r0, Z+
 1de:	0d 92       	st	X+, r0
 1e0:	a6 30       	cpi	r26, 0x06	; 6
 1e2:	b1 07       	cpc	r27, r17
 1e4:	d9 f7       	brne	.-10     	; 0x1dc <__do_copy_data+0xc>

000001e6 <__do_clear_bss>:
 1e6:	26 e0       	ldi	r18, 0x06	; 6
 1e8:	a6 e0       	ldi	r26, 0x06	; 6
 1ea:	b6 e0       	ldi	r27, 0x06	; 6
 1ec:	01 c0       	rjmp	.+2      	; 0x1f0 <.do_clear_bss_start>

000001ee <.do_clear_bss_loop>:
 1ee:	1d 92       	st	X+, r1

000001f0 <.do_clear_bss_start>:
 1f0:	a2 32       	cpi	r26, 0x22	; 34
 1f2:	b2 07       	cpc	r27, r18
 1f4:	e1 f7       	brne	.-8      	; 0x1ee <.do_clear_bss_loop>
 1f6:	48 d3       	rcall	.+1680   	; 0x888 <main>
 1f8:	eb c5       	rjmp	.+3030   	; 0xdd0 <_exit>

000001fa <__bad_interrupt>:
 1fa:	02 cf       	rjmp	.-508    	; 0x0 <__vectors>

000001fc <Mega328P_Init>:
.set	temp,0				//student comment here

.section ".text"			//student comment here
.global Mega328P_Init
Mega328P_Init:
		ldi	r16,0x07		;PB0(R*W),PB1(RS),PB2(E) as fixed outputs
 1fc:	07 e0       	ldi	r16, 0x07	; 7
		out	DDRB,r16		//student comment here
 1fe:	04 b9       	out	0x04, r16	; 4
		ldi	r16,0			//student comment here
 200:	00 e0       	ldi	r16, 0x00	; 0
		out	PORTB,r16		//student comment here
 202:	05 b9       	out	0x05, r16	; 5
		out	U2X0,r16		;initialize UART, 8bits, no parity, 1 stop, 9600
 204:	01 b9       	out	0x01, r16	; 1
		ldi	r17,0x0			//storing the value of the high byte for 9600 Baud rate
 206:	10 e0       	ldi	r17, 0x00	; 0
		ldi	r16,0x67		//storing the value of the low byte for 9600 Baud rate
 208:	07 e6       	ldi	r16, 0x67	; 103
		sts	UBRR0H,r17		//setting the high byte for Baud rate
 20a:	10 93 c5 00 	sts	0x00C5, r17	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
		sts	UBRR0L,r16		//setting the low byte for Baud rate
 20e:	00 93 c4 00 	sts	0x00C4, r16	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
		ldi	r16,24			//value to enable the receiver and transmitter
 212:	08 e1       	ldi	r16, 0x18	; 24
		sts	UCSR0B,r16		//enabling the receiver and transmitter
 214:	00 93 c1 00 	sts	0x00C1, r16	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
		ldi	r16,6			//student comment here
 218:	06 e0       	ldi	r16, 0x06	; 6
		sts	UCSR0C,r16		//student comment here
 21a:	00 93 c2 00 	sts	0x00C2, r16	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
		ldi r16,0x87		//initialize ADC
 21e:	07 e8       	ldi	r16, 0x87	; 135
		sts	ADCSRA,r16		//student comment here
 220:	00 93 7a 00 	sts	0x007A, r16	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
		ldi r16,0x40		//student comment here
 224:	00 e4       	ldi	r16, 0x40	; 64
		sts ADMUX,r16		//student comment here
 226:	00 93 7c 00 	sts	0x007C, r16	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
		ldi r16,0			//student comment here
 22a:	00 e0       	ldi	r16, 0x00	; 0
		sts ADCSRB,r16		//student comment here
 22c:	00 93 7b 00 	sts	0x007B, r16	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
		ldi r16,0xFE		//student comment here
 230:	0e ef       	ldi	r16, 0xFE	; 254
		sts DIDR0,r16		//student comment here
 232:	00 93 7e 00 	sts	0x007E, r16	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
		ldi r16,0xFF		//student comment here
 236:	0f ef       	ldi	r16, 0xFF	; 255
		sts DIDR1,r16		//student comment here
 238:	00 93 7f 00 	sts	0x007F, r16	; 0x80007f <__TEXT_REGION_LENGTH__+0x7e007f>
		ret					//student comment here
 23c:	08 95       	ret

0000023e <BAUD_Byte_Set>:
BAUD_Byte_Set:
	

.global LCD_Write_Command
LCD_Write_Command:
	call	UART_Off		//student comment here
 23e:	31 d0       	rcall	.+98     	; 0x2a2 <UART_Off>
	ldi		r16,0xFF		;PD0 - PD7 as outputs
 240:	0f ef       	ldi	r16, 0xFF	; 255
	out		DDRD,r16		//student comment here
 242:	0a b9       	out	0x0a, r16	; 10
	lds		r16,DATA		//student comment here
 244:	00 91 0b 06 	lds	r16, 0x060B	; 0x80060b <DATA>
	out		PORTD,r16		//student comment here
 248:	0b b9       	out	0x0b, r16	; 11
	ldi		r16,4			//student comment here
 24a:	04 e0       	ldi	r16, 0x04	; 4
	out		PORTB,r16		//student comment here
	call	LCD_Delay		//student comment here
 24c:	05 b9       	out	0x05, r16	; 5
 24e:	04 d0       	rcall	.+8      	; 0x258 <LCD_Delay>
	ldi		r16,0			//student comment here
	out		PORTB,r16		//student comment here
	call	LCD_Delay		//student comment here
 250:	00 e0       	ldi	r16, 0x00	; 0
 252:	05 b9       	out	0x05, r16	; 5
	call	UART_On			//student comment here
 254:	01 d0       	rcall	.+2      	; 0x258 <LCD_Delay>
 256:	1f c0       	rjmp	.+62     	; 0x296 <UART_On>

00000258 <LCD_Delay>:
	ret						//student comment here
 258:	0a ef       	ldi	r16, 0xFA	; 250

0000025a <D0>:

LCD_Delay:
	ldi		r16,0xFA		//student comment here
 25a:	1f ef       	ldi	r17, 0xFF	; 255

0000025c <D1>:
D0:	ldi		r17,0xFF		//student comment here
 25c:	1a 95       	dec	r17
D1:	dec		r17				//student comment here
 25e:	f1 f7       	brne	.-4      	; 0x25c <D1>
	brne	D1				//student comment here
	dec		r16				//student comment here
 260:	0a 95       	dec	r16
	brne	D0				//student comment here
 262:	d9 f7       	brne	.-10     	; 0x25a <D0>
	ret						//student comment here
 264:	08 95       	ret

00000266 <LCD_Write_Data>:

.global LCD_Write_Data
LCD_Write_Data:
	call	UART_Off		//student comment here
 266:	1d d0       	rcall	.+58     	; 0x2a2 <UART_Off>
 268:	0f ef       	ldi	r16, 0xFF	; 255
	ldi		r16,0xFF		//student comment here
 26a:	0a b9       	out	0x0a, r16	; 10
	out		DDRD,r16		//student comment here
 26c:	00 91 0b 06 	lds	r16, 0x060B	; 0x80060b <DATA>
	lds		r16,DATA		//student comment here
	out		PORTD,r16		//student comment here
 270:	0b b9       	out	0x0b, r16	; 11
	ldi		r16,6			//student comment here
	out		PORTB,r16		//student comment here
	call	LCD_Delay		//student comment here
 272:	06 e0       	ldi	r16, 0x06	; 6
	ldi		r16,0			//student comment here
 274:	05 b9       	out	0x05, r16	; 5
	out		PORTB,r16		//student comment here
 276:	f0 df       	rcall	.-32     	; 0x258 <LCD_Delay>
	call	LCD_Delay		//student comment here
 278:	00 e0       	ldi	r16, 0x00	; 0
 27a:	05 b9       	out	0x05, r16	; 5
	call	UART_On			//student comment here
 27c:	ed df       	rcall	.-38     	; 0x258 <LCD_Delay>
 27e:	0b c0       	rjmp	.+22     	; 0x296 <UART_On>
	ret						//student comment here
 280:	08 95       	ret

00000282 <LCD_Read_Data>:

.global LCD_Read_Data
LCD_Read_Data:
	call	UART_Off		//student comment here
 282:	0f d0       	rcall	.+30     	; 0x2a2 <UART_Off>
	ldi		r16,0x00		//student comment here
 284:	00 e0       	ldi	r16, 0x00	; 0
	out		DDRD,r16		//student comment here
 286:	0a b9       	out	0x0a, r16	; 10
	out		PORTB,4			//student comment here
 288:	45 b8       	out	0x05, r4	; 5
	in		r16,PORTD		//student comment here
 28a:	0b b1       	in	r16, 0x0b	; 11
	sts		DATA,r16		//student comment here
 28c:	00 93 0b 06 	sts	0x060B, r16	; 0x80060b <DATA>
	out		PORTB,0			//student comment here
 290:	05 b8       	out	0x05, r0	; 5
	call	UART_On			//student comment here
 292:	01 c0       	rjmp	.+2      	; 0x296 <UART_On>
 294:	08 95       	ret

00000296 <UART_On>:
	ret						//student comment here
 296:	02 e0       	ldi	r16, 0x02	; 2

.global UART_On
UART_On:
	ldi		r16,2				//student comment here
 298:	0a b9       	out	0x0a, r16	; 10
	out		DDRD,r16			//student comment here
 29a:	08 e1       	ldi	r16, 0x18	; 24
	ldi		r16,24				//student comment here
 29c:	00 93 c1 00 	sts	0x00C1, r16	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	sts		UCSR0B,r16			//student comment here
 2a0:	08 95       	ret

000002a2 <UART_Off>:
	ret							//student comment here
 2a2:	00 e0       	ldi	r16, 0x00	; 0

.global UART_Off
UART_Off:
	ldi	r16,0					//student comment here
 2a4:	00 93 c1 00 	sts	0x00C1, r16	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	sts UCSR0B,r16				//student comment here
 2a8:	08 95       	ret

000002aa <UART_Clear>:
	ret							//student comment here
 2aa:	00 91 c0 00 	lds	r16, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>

.global UART_Clear
UART_Clear:
	lds		r16,UCSR0A			//student comment here
 2ae:	07 ff       	sbrs	r16, 7
	sbrs	r16,RXC0			//student comment here
 2b0:	08 95       	ret
	ret							//student comment here
 2b2:	00 91 c6 00 	lds	r16, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	lds		r16,UDR0			//student comment here
 2b6:	f9 cf       	rjmp	.-14     	; 0x2aa <UART_Clear>

000002b8 <UART_Get>:
	rjmp	UART_Clear			//student comment here
 2b8:	00 91 c0 00 	lds	r16, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>

.global UART_Get
UART_Get:
	lds		r16,UCSR0A			//retrieves the status register that checks if there is data in the buffer
 2bc:	07 ff       	sbrs	r16, 7
	sbrs	r16,RXC0			//skips the next instruction if there is data in the buffer
 2be:	fc cf       	rjmp	.-8      	; 0x2b8 <UART_Get>
	rjmp	UART_Get			//loops the data retrieval function until there is data in the buffer
 2c0:	00 91 c6 00 	lds	r16, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	lds		r16,UDR0			//stores the data in the buffer in r16
 2c4:	00 93 0f 06 	sts	0x060F, r16	; 0x80060f <ASCII>
	sts		ASCII,r16			//stores the register data into the address pointed to by ASCII
 2c8:	08 95       	ret

000002ca <UART_Put>:
	ret							//end and return from this function
 2ca:	10 91 c0 00 	lds	r17, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>

.global UART_Put
UART_Put:
	lds		r17,UCSR0A			//student comment here
 2ce:	15 ff       	sbrs	r17, 5
	sbrs	r17,UDRE0			//student comment here
 2d0:	fc cf       	rjmp	.-8      	; 0x2ca <UART_Put>
	rjmp	UART_Put			//student comment here
 2d2:	00 91 0f 06 	lds	r16, 0x060F	; 0x80060f <ASCII>
	lds		r16,ASCII			//student comment here
 2d6:	00 93 c6 00 	sts	0x00C6, r16	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	sts		UDR0,r16			//student comment here
 2da:	08 95       	ret

000002dc <ADC_Get>:
	ret							//student comment here
 2dc:	07 ec       	ldi	r16, 0xC7	; 199

.global ADC_Get
ADC_Get:
		ldi		r16,0xC7			//student comment here
 2de:	00 93 7a 00 	sts	0x007A, r16	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

000002e2 <A2V1>:
		sts		ADCSRA,r16			//student comment here
 2e2:	00 91 7a 00 	lds	r16, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
A2V1:	lds		r16,ADCSRA			//student comment here
 2e6:	06 fd       	sbrc	r16, 6
		sbrc	r16,ADSC			//student comment here
 2e8:	fc cf       	rjmp	.-8      	; 0x2e2 <A2V1>
		rjmp 	A2V1				//student comment here
 2ea:	00 91 78 00 	lds	r16, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
		lds		r16,ADCL			//student comment here
 2ee:	00 93 1d 06 	sts	0x061D, r16	; 0x80061d <LADC>
		sts		LADC,r16			//student comment here
 2f2:	00 91 79 00 	lds	r16, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
		lds		r16,ADCH			//student comment here
 2f6:	00 93 0c 06 	sts	0x060C, r16	; 0x80060c <HADC>
		sts		HADC,r16			//student comment here
 2fa:	08 95       	ret

000002fc <EEPROM_Write>:
		ret							//student comment here
 2fc:	f9 99       	sbic	0x1f, 1	; 31

.global EEPROM_Write
EEPROM_Write:      
		sbic    EECR,EEPE
 2fe:	fe cf       	rjmp	.-4      	; 0x2fc <EEPROM_Write>
		rjmp    EEPROM_Write		; Wait for completion of previous write
 300:	20 91 0e 06 	lds	r18, 0x060E	; 0x80060e <lAddress>
		lds		r18,lAddress			; Set up address (r18:r17) in address register
 304:	10 91 0d 06 	lds	r17, 0x060D	; 0x80060d <hAddress>
		lds		r17,hAddress 
 308:	00 91 0a 06 	lds	r16, 0x060A	; 0x80060a <content>
		lds		r16,content				; Set up data in r16    
 30c:	22 bd       	out	0x22, r18	; 34
		out     EEARH, r18      
 30e:	11 bd       	out	0x21, r17	; 33
		out     EEARL, r17			      
 310:	00 bd       	out	0x20, r16	; 32
		out     EEDR,r16			; Write data (r16) to Data Register  
 312:	fa 9a       	sbi	0x1f, 2	; 31
		sbi     EECR,EEMPE			; Write logical one to EEMPE
 314:	f9 9a       	sbi	0x1f, 1	; 31
		sbi     EECR,EEPE			; Start eeprom write by setting EEPE
 316:	08 95       	ret

00000318 <EEPROM_Read>:
		ret 
 318:	f9 99       	sbic	0x1f, 1	; 31

.global EEPROM_Read
EEPROM_Read:					    
		sbic    EECR,EEPE    
 31a:	fe cf       	rjmp	.-4      	; 0x318 <EEPROM_Read>
		rjmp    EEPROM_Read		; Wait for completion of previous write
 31c:	20 91 0e 06 	lds	r18, 0x060E	; 0x80060e <lAddress>
		lds		r18,lAddress		; Set up address (r18:r17) in EEPROM address register
 320:	10 91 0d 06 	lds	r17, 0x060D	; 0x80060d <hAddress>
		lds		r17,hAddress
 324:	00 91 0a 06 	lds	r16, 0x060A	; 0x80060a <content>
		lds		r16,content
 328:	22 bd       	out	0x22, r18	; 34
		out     EEARH, r18   
 32a:	11 bd       	out	0x21, r17	; 33
		out     EEARL, r17		   
 32c:	f8 9a       	sbi	0x1f, 0	; 31
		sbi     EECR,EERE		; Start eeprom read by writing EERE
 32e:	00 b5       	in	r16, 0x20	; 32
		in      r16,EEDR		; Read data from Data Register
 330:	00 93 0f 06 	sts	0x060F, r16	; 0x80060f <ASCII>
		sts		ASCII,r16  
 334:	08 95       	ret

00000336 <UART_Puts>:
/**
*UART_Puts
*Display a string in the PC Terminal Program
*/
void UART_Puts(const char *str)
{
 336:	cf 93       	push	r28
 338:	df 93       	push	r29
 33a:	ec 01       	movw	r28, r24
	while (*str)
 33c:	98 81       	ld	r25, Y
 33e:	99 23       	and	r25, r25
 340:	39 f0       	breq	.+14     	; 0x350 <UART_Puts+0x1a>
 342:	21 96       	adiw	r28, 0x01	; 1
	{
		ASCII = *str++;
 344:	90 93 0f 06 	sts	0x060F, r25	; 0x80060f <ASCII>
		UART_Put();
 348:	c0 df       	rcall	.-128    	; 0x2ca <UART_Put>
*UART_Puts
*Display a string in the PC Terminal Program
*/
void UART_Puts(const char *str)
{
	while (*str)
 34a:	99 91       	ld	r25, Y+
 34c:	91 11       	cpse	r25, r1
 34e:	fa cf       	rjmp	.-12     	; 0x344 <UART_Puts+0xe>
	{
		ASCII = *str++;
		UART_Put();
	}
} // end UART_Puts
 350:	df 91       	pop	r29
 352:	cf 91       	pop	r28
 354:	08 95       	ret

00000356 <LCD_Puts>:
/**
*LCD_Puts
*Display a string on the LCD Module
*/
void LCD_Puts(const char *str)
{
 356:	cf 93       	push	r28
 358:	df 93       	push	r29
 35a:	ec 01       	movw	r28, r24
	while (*str)
 35c:	98 81       	ld	r25, Y
 35e:	99 23       	and	r25, r25
 360:	39 f0       	breq	.+14     	; 0x370 <LCD_Puts+0x1a>
 362:	21 96       	adiw	r28, 0x01	; 1
	{
		DATA = *str++;
 364:	90 93 0b 06 	sts	0x060B, r25	; 0x80060b <DATA>
		LCD_Write_Data();
 368:	7e df       	rcall	.-260    	; 0x266 <LCD_Write_Data>
*LCD_Puts
*Display a string on the LCD Module
*/
void LCD_Puts(const char *str)
{
	while (*str)
 36a:	99 91       	ld	r25, Y+
 36c:	91 11       	cpse	r25, r1
 36e:	fa cf       	rjmp	.-12     	; 0x364 <LCD_Puts+0xe>
	{
		DATA = *str++;
		LCD_Write_Data();
	}
} // end LCD_Puts
 370:	df 91       	pop	r29
 372:	cf 91       	pop	r28
 374:	08 95       	ret

00000376 <Banner>:
*Banner
*Display Tiny OS Banner on Terminal
*/
void Banner(void)
{
	UART_Puts(MS1);
 376:	88 ee       	ldi	r24, 0xE8	; 232
 378:	95 e0       	ldi	r25, 0x05	; 5
 37a:	dd df       	rcall	.-70     	; 0x336 <UART_Puts>
	UART_Puts(MS2);
 37c:	81 eb       	ldi	r24, 0xB1	; 177
 37e:	95 e0       	ldi	r25, 0x05	; 5
 380:	da df       	rcall	.-76     	; 0x336 <UART_Puts>
	UART_Puts(MS4);
 382:	8d e7       	ldi	r24, 0x7D	; 125
 384:	95 e0       	ldi	r25, 0x05	; 5
 386:	d7 cf       	rjmp	.-82     	; 0x336 <UART_Puts>
 388:	08 95       	ret

0000038a <HELP>:
*HELP
*Display available Tiny OS Commands on Terminal
*/
void HELP(void)
{
	UART_Puts(MS3);
 38a:	87 e8       	ldi	r24, 0x87	; 135
 38c:	95 e0       	ldi	r25, 0x05	; 5
 38e:	d3 cf       	rjmp	.-90     	; 0x336 <UART_Puts>
 390:	08 95       	ret

00000392 <LCD>:

/**
*LCD
*/
void LCD(void)						//Lite LCD demo
{
 392:	cf 93       	push	r28
 394:	df 93       	push	r29
	DATA = 0x34;					//Sets data bits in LCD
 396:	84 e3       	ldi	r24, 0x34	; 52
 398:	80 93 0b 06 	sts	0x060B, r24	; 0x80060b <DATA>
	LCD_Write_Command();
 39c:	50 df       	rcall	.-352    	; 0x23e <BAUD_Byte_Set>
	DATA = 0x08;					//Clearing display without clearing DDRAM content
 39e:	88 e0       	ldi	r24, 0x08	; 8
 3a0:	80 93 0b 06 	sts	0x060B, r24	; 0x80060b <DATA>
	LCD_Write_Command();
 3a4:	4c df       	rcall	.-360    	; 0x23e <BAUD_Byte_Set>
	DATA = 0x02;					//Set cursor position to 0
 3a6:	82 e0       	ldi	r24, 0x02	; 2
 3a8:	80 93 0b 06 	sts	0x060B, r24	; 0x80060b <DATA>
	LCD_Write_Command();
 3ac:	48 df       	rcall	.-368    	; 0x23e <BAUD_Byte_Set>
	DATA = 0x06;					//Entry Mode
 3ae:	86 e0       	ldi	r24, 0x06	; 6
 3b0:	80 93 0b 06 	sts	0x060B, r24	; 0x80060b <DATA>
	LCD_Write_Command();
	DATA = 0x0f;					//Display on cursor blinking
 3b4:	44 df       	rcall	.-376    	; 0x23e <BAUD_Byte_Set>
 3b6:	8f e0       	ldi	r24, 0x0F	; 15
	LCD_Write_Command();
 3b8:	80 93 0b 06 	sts	0x060B, r24	; 0x80060b <DATA>
	LCD_Puts(teamName);
 3bc:	40 df       	rcall	.-384    	; 0x23e <BAUD_Byte_Set>
 3be:	83 e3       	ldi	r24, 0x33	; 51
 3c0:	95 e0       	ldi	r25, 0x05	; 5
 3c2:	c9 df       	rcall	.-110    	; 0x356 <LCD_Puts>
	ASCII = '\0';
 3c4:	10 92 0f 06 	sts	0x060F, r1	; 0x80060f <ASCII>
	while (ASCII == '\0') {
		for (count = 0; count < 40; count ++) {
			DATA = 0x18;
 3c8:	c8 e1       	ldi	r28, 0x18	; 24
				DATA = 0x01;
				LCD_Write_Command();
				return;
			}
		}
		DATA = 0x02;
 3ca:	d2 e0       	ldi	r29, 0x02	; 2
	DATA = 0x0f;					//Display on cursor blinking
	LCD_Write_Command();
	LCD_Puts(teamName);
	ASCII = '\0';
	while (ASCII == '\0') {
		for (count = 0; count < 40; count ++) {
 3cc:	10 92 1f 06 	sts	0x061F, r1	; 0x80061f <count+0x1>
 3d0:	10 92 1e 06 	sts	0x061E, r1	; 0x80061e <count>
			DATA = 0x18;
 3d4:	c0 93 0b 06 	sts	0x060B, r28	; 0x80060b <DATA>
			LCD_Write_Command();
 3d8:	32 df       	rcall	.-412    	; 0x23e <BAUD_Byte_Set>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3da:	2f ef       	ldi	r18, 0xFF	; 255
 3dc:	83 ec       	ldi	r24, 0xC3	; 195
 3de:	99 e0       	ldi	r25, 0x09	; 9
 3e0:	21 50       	subi	r18, 0x01	; 1
 3e2:	80 40       	sbci	r24, 0x00	; 0
 3e4:	90 40       	sbci	r25, 0x00	; 0
 3e6:	e1 f7       	brne	.-8      	; 0x3e0 <LCD+0x4e>
 3e8:	00 c0       	rjmp	.+0      	; 0x3ea <LCD+0x58>
 3ea:	00 00       	nop
			_delay_ms(200);
			
			asm("lds r16,0xC6"); // check what ASCII value is being stored
 3ec:	00 91 c6 00 	lds	r16, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
			asm("sts ASCII,r16");
 3f0:	00 93 0f 06 	sts	0x060F, r16	; 0x80060f <ASCII>

			if (ASCII != '\0') {
 3f4:	80 91 0f 06 	lds	r24, 0x060F	; 0x80060f <ASCII>
 3f8:	88 23       	and	r24, r24
				DATA = 0x01;
 3fa:	29 f0       	breq	.+10     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	80 93 0b 06 	sts	0x060B, r24	; 0x80060b <DATA>
				LCD_Write_Command();
 402:	1d df       	rcall	.-454    	; 0x23e <BAUD_Byte_Set>
				return;
 404:	12 c0       	rjmp	.+36     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
	DATA = 0x0f;					//Display on cursor blinking
	LCD_Write_Command();
	LCD_Puts(teamName);
	ASCII = '\0';
	while (ASCII == '\0') {
		for (count = 0; count < 40; count ++) {
 406:	80 91 1e 06 	lds	r24, 0x061E	; 0x80061e <count>
 40a:	90 91 1f 06 	lds	r25, 0x061F	; 0x80061f <count+0x1>
 40e:	01 96       	adiw	r24, 0x01	; 1
 410:	90 93 1f 06 	sts	0x061F, r25	; 0x80061f <count+0x1>
 414:	80 93 1e 06 	sts	0x061E, r24	; 0x80061e <count>
 418:	88 97       	sbiw	r24, 0x28	; 40
				DATA = 0x01;
				LCD_Write_Command();
				return;
			}
		}
		DATA = 0x02;
 41a:	e0 f2       	brcs	.-72     	; 0x3d4 <LCD+0x42>
 41c:	d0 93 0b 06 	sts	0x060B, r29	; 0x80060b <DATA>
		LCD_Write_Command();
 420:	0e df       	rcall	.-484    	; 0x23e <BAUD_Byte_Set>
	LCD_Write_Command();
	DATA = 0x0f;					//Display on cursor blinking
	LCD_Write_Command();
	LCD_Puts(teamName);
	ASCII = '\0';
	while (ASCII == '\0') {
 422:	80 91 0f 06 	lds	r24, 0x060F	; 0x80060f <ASCII>
 426:	88 23       	and	r24, r24
 428:	89 f2       	breq	.-94     	; 0x3cc <LCD+0x3a>
		}
		DATA = 0x02;
		LCD_Write_Command();
	}
	return;
} // end LCD
 42a:	df 91       	pop	r29
 42c:	cf 91       	pop	r28
 42e:	08 95       	ret

00000430 <ADC>:

/**
*Lite Demo of the Analog to Digital Converter
*/
void ADC(void)
{
 430:	8f 92       	push	r8
 432:	9f 92       	push	r9
 434:	af 92       	push	r10
 436:	bf 92       	push	r11
 438:	cf 92       	push	r12
 43a:	df 92       	push	r13
 43c:	ef 92       	push	r14
 43e:	ff 92       	push	r15
	ASCII = '\0';
 440:	10 92 0f 06 	sts	0x060F, r1	; 0x80060f <ASCII>
	while (ASCII != 27) {
		ADC_Get();
 444:	4b df       	rcall	.-362    	; 0x2dc <ADC_Get>

		Acc = (((int)HADC) * 0x100 + (int)(LADC)); // get 10 bit number
 446:	60 91 0c 06 	lds	r22, 0x060C	; 0x80060c <HADC>
 44a:	06 2e       	mov	r0, r22
 44c:	00 0c       	add	r0, r0
 44e:	77 0b       	sbc	r23, r23
 450:	76 2f       	mov	r23, r22
 452:	66 27       	eor	r22, r22
 454:	80 91 1d 06 	lds	r24, 0x061D	; 0x80061d <LADC>
 458:	68 0f       	add	r22, r24
 45a:	71 1d       	adc	r23, r1
 45c:	87 fd       	sbrc	r24, 7
 45e:	7a 95       	dec	r23
 460:	70 93 21 06 	sts	0x0621, r23	; 0x800621 <Acc+0x1>
 464:	60 93 20 06 	sts	0x0620, r22	; 0x800620 <Acc>

		r = 10000.0 * Acc / (1024.0 - Acc); // adapt the thermistor to ADC
 468:	07 2e       	mov	r0, r23
 46a:	00 0c       	add	r0, r0
 46c:	88 0b       	sbc	r24, r24
 46e:	99 0b       	sbc	r25, r25
 470:	0f d3       	rcall	.+1566   	; 0xa90 <__floatsisf>
 472:	6b 01       	movw	r12, r22
 474:	7c 01       	movw	r14, r24
 476:	20 e0       	ldi	r18, 0x00	; 0
 478:	30 e4       	ldi	r19, 0x40	; 64
 47a:	4c e1       	ldi	r20, 0x1C	; 28
 47c:	56 e4       	ldi	r21, 0x46	; 70
 47e:	d9 d3       	rcall	.+1970   	; 0xc32 <__mulsf3>
 480:	4b 01       	movw	r8, r22
 482:	5c 01       	movw	r10, r24
 484:	a7 01       	movw	r20, r14
 486:	96 01       	movw	r18, r12
 488:	60 e0       	ldi	r22, 0x00	; 0
 48a:	70 e0       	ldi	r23, 0x00	; 0
 48c:	80 e8       	ldi	r24, 0x80	; 128
 48e:	94 e4       	ldi	r25, 0x44	; 68
 490:	ff d1       	rcall	.+1022   	; 0x890 <__subsf3>
 492:	9b 01       	movw	r18, r22
 494:	ac 01       	movw	r20, r24
 496:	c5 01       	movw	r24, r10
 498:	b4 01       	movw	r22, r8
 49a:	5f d2       	rcall	.+1214   	; 0x95a <__divsf3>
 49c:	60 93 14 06 	sts	0x0614, r22	; 0x800614 <r>
 4a0:	70 93 15 06 	sts	0x0615, r23	; 0x800615 <r+0x1>
 4a4:	80 93 16 06 	sts	0x0616, r24	; 0x800616 <r+0x2>
 4a8:	90 93 17 06 	sts	0x0617, r25	; 0x800617 <r+0x3>

		t = 3625 * 298.15 / (298.15*log(r / 10000) + 3950); // get temperature in Kelvin
 4ac:	20 e0       	ldi	r18, 0x00	; 0
 4ae:	30 e4       	ldi	r19, 0x40	; 64
 4b0:	4c e1       	ldi	r20, 0x1C	; 28
 4b2:	56 e4       	ldi	r21, 0x46	; 70
 4b4:	52 d2       	rcall	.+1188   	; 0x95a <__divsf3>
 4b6:	7d d3       	rcall	.+1786   	; 0xbb2 <log>
		t = t - 273.15; // convert to Celsius
		t = t * 9.0 / 5.0 + 32.0; // convert to Fahrenheit
 4b8:	23 e3       	ldi	r18, 0x33	; 51
 4ba:	33 e1       	ldi	r19, 0x13	; 19
 4bc:	45 e9       	ldi	r20, 0x95	; 149
 4be:	53 e4       	ldi	r21, 0x43	; 67
 4c0:	b8 d3       	rcall	.+1904   	; 0xc32 <__mulsf3>
 4c2:	20 e0       	ldi	r18, 0x00	; 0
 4c4:	30 ee       	ldi	r19, 0xE0	; 224
 4c6:	46 e7       	ldi	r20, 0x76	; 118
 4c8:	55 e4       	ldi	r21, 0x45	; 69
 4ca:	e3 d1       	rcall	.+966    	; 0x892 <__addsf3>
 4cc:	9b 01       	movw	r18, r22
 4ce:	ac 01       	movw	r20, r24
 4d0:	6e ec       	ldi	r22, 0xCE	; 206
 4d2:	7e ee       	ldi	r23, 0xEE	; 238
 4d4:	83 e8       	ldi	r24, 0x83	; 131
 4d6:	99 e4       	ldi	r25, 0x49	; 73
 4d8:	40 d2       	rcall	.+1152   	; 0x95a <__divsf3>
 4da:	23 e3       	ldi	r18, 0x33	; 51
 4dc:	33 e9       	ldi	r19, 0x93	; 147
 4de:	48 e8       	ldi	r20, 0x88	; 136
 4e0:	53 e4       	ldi	r21, 0x43	; 67
 4e2:	d6 d1       	rcall	.+940    	; 0x890 <__subsf3>
 4e4:	20 e0       	ldi	r18, 0x00	; 0
 4e6:	30 e0       	ldi	r19, 0x00	; 0
 4e8:	40 e1       	ldi	r20, 0x10	; 16
 4ea:	51 e4       	ldi	r21, 0x41	; 65
 4ec:	a2 d3       	rcall	.+1860   	; 0xc32 <__mulsf3>
 4ee:	20 e0       	ldi	r18, 0x00	; 0
 4f0:	30 e0       	ldi	r19, 0x00	; 0
 4f2:	40 ea       	ldi	r20, 0xA0	; 160
 4f4:	50 e4       	ldi	r21, 0x40	; 64
 4f6:	31 d2       	rcall	.+1122   	; 0x95a <__divsf3>
 4f8:	20 e0       	ldi	r18, 0x00	; 0
 4fa:	30 e0       	ldi	r19, 0x00	; 0
 4fc:	40 e0       	ldi	r20, 0x00	; 0
 4fe:	52 e4       	ldi	r21, 0x42	; 66
 500:	c8 d1       	rcall	.+912    	; 0x892 <__addsf3>
 502:	60 93 06 06 	sts	0x0606, r22	; 0x800606 <__data_end>
 506:	70 93 07 06 	sts	0x0607, r23	; 0x800607 <__data_end+0x1>
 50a:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__data_end+0x2>
 50e:	90 93 09 06 	sts	0x0609, r25	; 0x800609 <__data_end+0x3>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 512:	8b d2       	rcall	.+1302   	; 0xa2a <__fixsfsi>
 514:	dc 01       	movw	r26, r24
 516:	cb 01       	movw	r24, r22
 518:	4a e0       	ldi	r20, 0x0A	; 10
 51a:	60 e1       	ldi	r22, 0x10	; 16
 51c:	76 e0       	ldi	r23, 0x06	; 6
 51e:	25 d4       	rcall	.+2122   	; 0xd6a <__itoa_ncheck>

		itoa((int)t, temperature, 10); // convert the temperature to a string for UART_Puts

		UART_Puts("\r\n");
 520:	83 e4       	ldi	r24, 0x43	; 67
 522:	92 e0       	ldi	r25, 0x02	; 2
 524:	08 df       	rcall	.-496    	; 0x336 <UART_Puts>
 526:	80 e1       	ldi	r24, 0x10	; 16
		UART_Puts(temperature);
 528:	96 e0       	ldi	r25, 0x06	; 6
 52a:	05 df       	rcall	.-502    	; 0x336 <UART_Puts>
 52c:	8b e5       	ldi	r24, 0x5B	; 91
		UART_Puts(MS7);
 52e:	95 e0       	ldi	r25, 0x05	; 5
 530:	02 df       	rcall	.-508    	; 0x336 <UART_Puts>
 532:	2f ef       	ldi	r18, 0xFF	; 255
 534:	81 ee       	ldi	r24, 0xE1	; 225
 536:	94 e0       	ldi	r25, 0x04	; 4
 538:	21 50       	subi	r18, 0x01	; 1
 53a:	80 40       	sbci	r24, 0x00	; 0
 53c:	90 40       	sbci	r25, 0x00	; 0
 53e:	e1 f7       	brne	.-8      	; 0x538 <ADC+0x108>
 540:	00 c0       	rjmp	.+0      	; 0x542 <ADC+0x112>
 542:	00 00       	nop
 544:	80 e0       	ldi	r24, 0x00	; 0
 546:	91 e0       	ldi	r25, 0x01	; 1

		_delay_ms(100);
		
		UART_Puts("\033[2J");
 548:	f6 de       	rcall	.-532    	; 0x336 <UART_Puts>
 54a:	85 e0       	ldi	r24, 0x05	; 5
 54c:	91 e0       	ldi	r25, 0x01	; 1
 54e:	f3 de       	rcall	.-538    	; 0x336 <UART_Puts>
		UART_Puts("\033[0;0H");
 550:	00 91 c6 00 	lds	r16, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 554:	00 93 0f 06 	sts	0x060F, r16	; 0x80060f <ASCII>

		asm("lds r16,0xC6"); // check what ASCII value is being stored
 558:	80 91 0f 06 	lds	r24, 0x060F	; 0x80060f <ASCII>
		asm("sts ASCII,r16");
 55c:	8b 31       	cpi	r24, 0x1B	; 27
 55e:	09 f0       	breq	.+2      	; 0x562 <ADC+0x132>
*Lite Demo of the Analog to Digital Converter
*/
void ADC(void)
{
	ASCII = '\0';
	while (ASCII != 27) {
 560:	71 cf       	rjmp	.-286    	; 0x444 <ADC+0x14>
 562:	ff 90       	pop	r15
 564:	ef 90       	pop	r14
 566:	df 90       	pop	r13
 568:	cf 90       	pop	r12
		asm("lds r16,0xC6"); // check what ASCII value is being stored
		asm("sts ASCII,r16");

	}
	return;
} // end ADC
 56a:	bf 90       	pop	r11
 56c:	af 90       	pop	r10
 56e:	9f 90       	pop	r9
 570:	8f 90       	pop	r8
 572:	08 95       	ret

00000574 <getEEPROMAddress>:
 574:	8c e0       	ldi	r24, 0x0C	; 12
 576:	91 e0       	ldi	r25, 0x01	; 1
 578:	de de       	rcall	.-580    	; 0x336 <UART_Puts>
 57a:	9e de       	rcall	.-708    	; 0x2b8 <UART_Get>
*gets high-bit and then low-bit from the user when prompted
*/
void getEEPROMAddress()
{
	UART_Puts("\r\nEnter the high-bit of the EEPROM Address ");
	UART_Get();
 57c:	80 91 0f 06 	lds	r24, 0x060F	; 0x80060f <ASCII>
	hAddress = ASCII; // set high bit of EEPROM address --- r18 --- see Assembler1.s
 580:	80 93 0d 06 	sts	0x060D, r24	; 0x80060d <hAddress>
 584:	88 e3       	ldi	r24, 0x38	; 56
	UART_Puts("\r\nEnter the low-bit of the EEPROM Address ");
 586:	91 e0       	ldi	r25, 0x01	; 1
 588:	d6 de       	rcall	.-596    	; 0x336 <UART_Puts>
	UART_Get();
 58a:	96 de       	rcall	.-724    	; 0x2b8 <UART_Get>
 58c:	80 91 0f 06 	lds	r24, 0x060F	; 0x80060f <ASCII>
	lAddress = ASCII; // set low bit EEPROM address --- r17 --- see Assembler1.s
 590:	80 93 0e 06 	sts	0x060E, r24	; 0x80060e <lAddress>
 594:	08 95       	ret

00000596 <EEPROM>:
 596:	83 e6       	ldi	r24, 0x63	; 99
*EEPROM
*prompt user to read or write to EEPROM otherwise exit
*/
void EEPROM(void)
{
	UART_Puts("\r\nWould you like to (R)ead, (W)rite, or (Esc) Menu\r\n");
 598:	91 e0       	ldi	r25, 0x01	; 1
 59a:	cd de       	rcall	.-614    	; 0x336 <UART_Puts>
	UART_Get(); // get input from terminal
 59c:	8d de       	rcall	.-742    	; 0x2b8 <UART_Get>
 59e:	90 91 0f 06 	lds	r25, 0x060F	; 0x80060f <ASCII>
	if (ASCII == 'r' || ASCII == 'R')
 5a2:	89 2f       	mov	r24, r25
 5a4:	8f 7d       	andi	r24, 0xDF	; 223
 5a6:	82 35       	cpi	r24, 0x52	; 82
 5a8:	e9 f4       	brne	.+58     	; 0x5e4 <EEPROM+0x4e>
 5aa:	88 e9       	ldi	r24, 0x98	; 152
	{
		UART_Puts("\r\nYou selected to read from EEPROM\r\n");
 5ac:	91 e0       	ldi	r25, 0x01	; 1
 5ae:	c3 de       	rcall	.-634    	; 0x336 <UART_Puts>
		getEEPROMAddress();
 5b0:	e1 df       	rcall	.-62     	; 0x574 <getEEPROMAddress>
		UART_Puts("\r\n\r\nContent at ");
 5b2:	8d eb       	ldi	r24, 0xBD	; 189
 5b4:	91 e0       	ldi	r25, 0x01	; 1
 5b6:	bf de       	rcall	.-642    	; 0x336 <UART_Puts>
		ASCII = hAddress;
 5b8:	80 91 0d 06 	lds	r24, 0x060D	; 0x80060d <hAddress>
 5bc:	80 93 0f 06 	sts	0x060F, r24	; 0x80060f <ASCII>
		UART_Put();
 5c0:	84 de       	rcall	.-760    	; 0x2ca <UART_Put>
		UART_Puts("x");
 5c2:	8d ec       	ldi	r24, 0xCD	; 205
 5c4:	91 e0       	ldi	r25, 0x01	; 1
 5c6:	b7 de       	rcall	.-658    	; 0x336 <UART_Puts>
		ASCII = lAddress;
 5c8:	80 91 0e 06 	lds	r24, 0x060E	; 0x80060e <lAddress>
		UART_Put();
 5cc:	80 93 0f 06 	sts	0x060F, r24	; 0x80060f <ASCII>
		UART_Puts(": ");
 5d0:	7c de       	rcall	.-776    	; 0x2ca <UART_Put>
 5d2:	8f ec       	ldi	r24, 0xCF	; 207
 5d4:	91 e0       	ldi	r25, 0x01	; 1
		EEPROM_Read(); // gets value stored in EEPROM
 5d6:	af de       	rcall	.-674    	; 0x336 <UART_Puts>
		UART_Put();
 5d8:	9f de       	rcall	.-706    	; 0x318 <EEPROM_Read>
		UART_Puts("\r\n");
 5da:	77 de       	rcall	.-786    	; 0x2ca <UART_Put>
 5dc:	83 e4       	ldi	r24, 0x43	; 67
 5de:	92 e0       	ldi	r25, 0x02	; 2
	}
	else if (ASCII == 'w' || ASCII == 'W')
 5e0:	aa ce       	rjmp	.-684    	; 0x336 <UART_Puts>
 5e2:	08 95       	ret
	{
		UART_Puts("\r\nYou selected to write to EEPROM\r\n");
 5e4:	87 35       	cpi	r24, 0x57	; 87
 5e6:	71 f4       	brne	.+28     	; 0x604 <EEPROM+0x6e>
 5e8:	82 ed       	ldi	r24, 0xD2	; 210
		getEEPROMAddress();
 5ea:	91 e0       	ldi	r25, 0x01	; 1
 5ec:	a4 de       	rcall	.-696    	; 0x336 <UART_Puts>
		UART_Puts("\r\nEnter the content to be stored at the EEPROM Address provide\r\n");
 5ee:	c2 df       	rcall	.-124    	; 0x574 <getEEPROMAddress>
 5f0:	86 ef       	ldi	r24, 0xF6	; 246
 5f2:	91 e0       	ldi	r25, 0x01	; 1
		UART_Get(); // get input from terminal
 5f4:	a0 de       	rcall	.-704    	; 0x336 <UART_Puts>
		content = ASCII; // set content to be stored in address
 5f6:	60 de       	rcall	.-832    	; 0x2b8 <UART_Get>
 5f8:	80 91 0f 06 	lds	r24, 0x060F	; 0x80060f <ASCII>
 5fc:	80 93 0a 06 	sts	0x060A, r24	; 0x80060a <content>
		EEPROM_Write(); // write data to EEPROM
 600:	7d ce       	rjmp	.-774    	; 0x2fc <EEPROM_Write>
 602:	08 95       	ret
	}
	else if (ASCII == 27)
 604:	9b 31       	cpi	r25, 0x1B	; 27
 606:	21 f4       	brne	.+8      	; 0x610 <EEPROM+0x7a>
	{
		UART_Puts("\r\nThank you.\r\n");
 608:	87 e3       	ldi	r24, 0x37	; 55
 60a:	92 e0       	ldi	r25, 0x02	; 2
 60c:	94 ce       	rjmp	.-728    	; 0x336 <UART_Puts>
 60e:	08 95       	ret
		return;
 610:	8e e5       	ldi	r24, 0x5E	; 94
	}
	else
	{
		UART_Puts(MS5);
 612:	95 e0       	ldi	r25, 0x05	; 5
 614:	90 ce       	rjmp	.-736    	; 0x336 <UART_Puts>
 616:	08 95       	ret

00000618 <BAUD_Set>:
 618:	86 e4       	ldi	r24, 0x46	; 70
 61a:	92 e0       	ldi	r25, 0x02	; 2
*Changes the Baud rate to predefined values based on user choice
*/
void BAUD_Set(void) {
	unsigned int done = 0;
	while (!done) {
		UART_Puts("\r\nSelect from the following Baud Rates\r\n(a) 9600 (b) 4800 (c) 2400 (d) 1200 (e) 600 (f) 300 (ESC) Menu\r\n");
 61c:	8c de       	rcall	.-744    	; 0x336 <UART_Puts>
		UART_Get();
 61e:	4c de       	rcall	.-872    	; 0x2b8 <UART_Get>
 620:	e0 91 0f 06 	lds	r30, 0x060F	; 0x80060f <ASCII>

		switch (ASCII) {
 624:	8e 2f       	mov	r24, r30
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	fc 01       	movw	r30, r24
 62a:	7b 97       	sbiw	r30, 0x1b	; 27
 62c:	ec 34       	cpi	r30, 0x4C	; 76
 62e:	f1 05       	cpc	r31, r1
 630:	38 f5       	brcc	.+78     	; 0x680 <BAUD_Set+0x68>
 632:	ec 5c       	subi	r30, 0xCC	; 204
 634:	ff 4f       	sbci	r31, 0xFF	; 255
 636:	93 c3       	rjmp	.+1830   	; 0xd5e <__tablejump2__>
 638:	8f ea       	ldi	r24, 0xAF	; 175
			case 'a':
			case 'A':
				UART_Puts("\r\nBaud rate selected: 9600\r\n");
 63a:	92 e0       	ldi	r25, 0x02	; 2
 63c:	7c de       	rcall	.-776    	; 0x336 <UART_Puts>
 63e:	10 e0       	ldi	r17, 0x00	; 0
 640:	07 e6       	ldi	r16, 0x67	; 103
				asm("ldi r17, 0x00");
 642:	22 c0       	rjmp	.+68     	; 0x688 <BAUD_Set+0x70>
				asm("ldi r16, 0x67");
				done = 1;
				break;
 644:	8c ec       	ldi	r24, 0xCC	; 204
			case 'b':
			case 'B':
				UART_Puts("\r\nBaud rate selected: 4800\r\n");
 646:	92 e0       	ldi	r25, 0x02	; 2
 648:	76 de       	rcall	.-788    	; 0x336 <UART_Puts>
 64a:	10 e0       	ldi	r17, 0x00	; 0
 64c:	0f ec       	ldi	r16, 0xCF	; 207
				asm("ldi r17, 0x00");
				asm("ldi r16, 0xCF");
 64e:	1c c0       	rjmp	.+56     	; 0x688 <BAUD_Set+0x70>
				done = 1;
				break;
 650:	89 ee       	ldi	r24, 0xE9	; 233
			case 'c':
			case 'C':
				UART_Puts("\r\nBaud rate selected: 2400\r\n");
 652:	92 e0       	ldi	r25, 0x02	; 2
 654:	70 de       	rcall	.-800    	; 0x336 <UART_Puts>
 656:	11 e0       	ldi	r17, 0x01	; 1
				asm("ldi r17, 0x01");
 658:	0f e9       	ldi	r16, 0x9F	; 159
				asm("ldi r16, 0x9F");
 65a:	16 c0       	rjmp	.+44     	; 0x688 <BAUD_Set+0x70>
				done= 1;
				break;
 65c:	86 e0       	ldi	r24, 0x06	; 6
			case 'd':
			case 'D':
				UART_Puts("\r\nBaud rate selected: 1200\r\n");
 65e:	93 e0       	ldi	r25, 0x03	; 3
 660:	6a de       	rcall	.-812    	; 0x336 <UART_Puts>
 662:	13 e0       	ldi	r17, 0x03	; 3
				asm("ldi r17, 0x03");
 664:	0f e3       	ldi	r16, 0x3F	; 63
				asm("ldi r16, 0x3F");
 666:	10 c0       	rjmp	.+32     	; 0x688 <BAUD_Set+0x70>
				done = 1;
				break;
 668:	83 e2       	ldi	r24, 0x23	; 35
			case 'e':
			case 'E':
				UART_Puts("\r\nBaud rate selected: 600\r\n");
 66a:	93 e0       	ldi	r25, 0x03	; 3
 66c:	64 de       	rcall	.-824    	; 0x336 <UART_Puts>
 66e:	16 e0       	ldi	r17, 0x06	; 6
				asm("ldi 17, 0x06");
 670:	0f e7       	ldi	r16, 0x7F	; 127
				asm("ldi r16, 0x7F");
 672:	0a c0       	rjmp	.+20     	; 0x688 <BAUD_Set+0x70>
				done = 1;
				break;
 674:	8f e3       	ldi	r24, 0x3F	; 63
			case 'f':
			case 'F':
				UART_Puts("\r\nBaud rate selected: 300\r\n");
 676:	93 e0       	ldi	r25, 0x03	; 3
 678:	5e de       	rcall	.-836    	; 0x336 <UART_Puts>
 67a:	1c e0       	ldi	r17, 0x0C	; 12
				asm("ldi r17, 0x0C");
 67c:	0f ef       	ldi	r16, 0xFF	; 255
				asm("ldi r16, 0xFF");
 67e:	04 c0       	rjmp	.+8      	; 0x688 <BAUD_Set+0x70>
				done = 1;
				break;
 680:	8b e5       	ldi	r24, 0x5B	; 91
			case 27:
				return;
			default:		
				UART_Puts("\r\nInvalid option\r\n");
 682:	93 e0       	ldi	r25, 0x03	; 3
 684:	58 de       	rcall	.-848    	; 0x336 <UART_Puts>
 686:	c8 cf       	rjmp	.-112    	; 0x618 <BAUD_Set>
 688:	10 93 c5 00 	sts	0x00C5, r17	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
				break;
		}
	}

	asm("sts 0xC5,r17");
 68c:	00 93 c4 00 	sts	0x00C4, r16	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	asm("sts 0xC4,r16");
 690:	08 95       	ret

00000692 <Data_Size_Set>:
 692:	8e e6       	ldi	r24, 0x6E	; 110
 694:	93 e0       	ldi	r25, 0x03	; 3
*/
void Data_Size_Set(void) {	
	unsigned int *b_reg = (int *) 0xC1;
	unsigned int *c_reg = (int *) 0xC2;
	while (1) {
		UART_Puts("\r\nSelect from the following bit sizes\r\n(5) bits (6) bits (7) bits (8) bits (9) bits (ESC) Menu\r\n");
 696:	4f de       	rcall	.-866    	; 0x336 <UART_Puts>
		UART_Get();
 698:	0f de       	rcall	.-994    	; 0x2b8 <UART_Get>
 69a:	80 91 0f 06 	lds	r24, 0x060F	; 0x80060f <ASCII>
		switch (ASCII) {
 69e:	86 33       	cpi	r24, 0x36	; 54
 6a0:	09 f1       	breq	.+66     	; 0x6e4 <Data_Size_Set+0x52>
 6a2:	30 f4       	brcc	.+12     	; 0x6b0 <Data_Size_Set+0x1e>
 6a4:	8b 31       	cpi	r24, 0x1B	; 27
 6a6:	09 f4       	brne	.+2      	; 0x6aa <Data_Size_Set+0x18>
 6a8:	65 c0       	rjmp	.+202    	; 0x774 <Data_Size_Set+0xe2>
 6aa:	85 33       	cpi	r24, 0x35	; 53
 6ac:	49 f0       	breq	.+18     	; 0x6c0 <Data_Size_Set+0x2e>
 6ae:	f1 cf       	rjmp	.-30     	; 0x692 <Data_Size_Set>
 6b0:	88 33       	cpi	r24, 0x38	; 56
 6b2:	09 f4       	brne	.+2      	; 0x6b6 <Data_Size_Set+0x24>
 6b4:	3c c0       	rjmp	.+120    	; 0x72e <Data_Size_Set+0x9c>
 6b6:	40 f1       	brcs	.+80     	; 0x708 <Data_Size_Set+0x76>
 6b8:	89 33       	cpi	r24, 0x39	; 57
 6ba:	09 f4       	brne	.+2      	; 0x6be <Data_Size_Set+0x2c>
 6bc:	4a c0       	rjmp	.+148    	; 0x752 <Data_Size_Set+0xc0>
 6be:	e9 cf       	rjmp	.-46     	; 0x692 <Data_Size_Set>
 6c0:	8f ec       	ldi	r24, 0xCF	; 207
			case '5':
				UART_Puts("\r\n5 bits\r\n");
 6c2:	93 e0       	ldi	r25, 0x03	; 3
 6c4:	38 de       	rcall	.-912    	; 0x336 <UART_Puts>
 6c6:	e1 ec       	ldi	r30, 0xC1	; 193
				*b_reg &=~(1<<2);
 6c8:	f0 e0       	ldi	r31, 0x00	; 0
 6ca:	80 81       	ld	r24, Z
 6cc:	91 81       	ldd	r25, Z+1	; 0x01
 6ce:	8b 7f       	andi	r24, 0xFB	; 251
 6d0:	91 83       	std	Z+1, r25	; 0x01
 6d2:	80 83       	st	Z, r24
 6d4:	e2 ec       	ldi	r30, 0xC2	; 194
				*c_reg &=~(1<<2);
 6d6:	f0 e0       	ldi	r31, 0x00	; 0
 6d8:	80 81       	ld	r24, Z
 6da:	91 81       	ldd	r25, Z+1	; 0x01
 6dc:	8b 7f       	andi	r24, 0xFB	; 251
 6de:	91 83       	std	Z+1, r25	; 0x01
 6e0:	80 83       	st	Z, r24
 6e2:	08 95       	ret
				*c_reg &=~(1<<2);
				return;
			case '6':
				UART_Puts("\r\n6 bits\r\n");
 6e4:	8a ed       	ldi	r24, 0xDA	; 218
 6e6:	93 e0       	ldi	r25, 0x03	; 3
 6e8:	26 de       	rcall	.-948    	; 0x336 <UART_Puts>
 6ea:	e1 ec       	ldi	r30, 0xC1	; 193
				*b_reg &=~(1<<2);
 6ec:	f0 e0       	ldi	r31, 0x00	; 0
 6ee:	80 81       	ld	r24, Z
 6f0:	91 81       	ldd	r25, Z+1	; 0x01
 6f2:	8b 7f       	andi	r24, 0xFB	; 251
 6f4:	91 83       	std	Z+1, r25	; 0x01
 6f6:	80 83       	st	Z, r24
 6f8:	e2 ec       	ldi	r30, 0xC2	; 194
				*c_reg &=~(1<<2);
				*c_reg |= 1<<2;
 6fa:	f0 e0       	ldi	r31, 0x00	; 0
 6fc:	80 81       	ld	r24, Z
 6fe:	91 81       	ldd	r25, Z+1	; 0x01
 700:	84 60       	ori	r24, 0x04	; 4
 702:	91 83       	std	Z+1, r25	; 0x01
 704:	80 83       	st	Z, r24
				return;
 706:	08 95       	ret
			case '7':
				UART_Puts("\r\n7 bits\r\n");
 708:	85 ee       	ldi	r24, 0xE5	; 229
 70a:	93 e0       	ldi	r25, 0x03	; 3
 70c:	14 de       	rcall	.-984    	; 0x336 <UART_Puts>
 70e:	e1 ec       	ldi	r30, 0xC1	; 193
				*b_reg &=~(1<<2);
 710:	f0 e0       	ldi	r31, 0x00	; 0
 712:	80 81       	ld	r24, Z
 714:	91 81       	ldd	r25, Z+1	; 0x01
 716:	8b 7f       	andi	r24, 0xFB	; 251
 718:	91 83       	std	Z+1, r25	; 0x01
 71a:	80 83       	st	Z, r24
 71c:	e2 ec       	ldi	r30, 0xC2	; 194
				*c_reg |= 1<<2;
				*c_reg &=~(1<<1);
 71e:	f0 e0       	ldi	r31, 0x00	; 0
 720:	80 81       	ld	r24, Z
 722:	91 81       	ldd	r25, Z+1	; 0x01
 724:	8d 7f       	andi	r24, 0xFD	; 253
 726:	84 60       	ori	r24, 0x04	; 4
 728:	91 83       	std	Z+1, r25	; 0x01
 72a:	80 83       	st	Z, r24
				return;
 72c:	08 95       	ret
			case '8':
				UART_Puts("\r\n8 bits\r\n");
 72e:	80 ef       	ldi	r24, 0xF0	; 240
 730:	93 e0       	ldi	r25, 0x03	; 3
 732:	01 de       	rcall	.-1022   	; 0x336 <UART_Puts>
 734:	e1 ec       	ldi	r30, 0xC1	; 193
				*b_reg &=~(1<<2);
 736:	f0 e0       	ldi	r31, 0x00	; 0
 738:	80 81       	ld	r24, Z
 73a:	91 81       	ldd	r25, Z+1	; 0x01
 73c:	8b 7f       	andi	r24, 0xFB	; 251
 73e:	91 83       	std	Z+1, r25	; 0x01
 740:	80 83       	st	Z, r24
 742:	e2 ec       	ldi	r30, 0xC2	; 194
				*c_reg |= (1<<2);
				*c_reg |= (1<<1);
 744:	f0 e0       	ldi	r31, 0x00	; 0
 746:	80 81       	ld	r24, Z
 748:	91 81       	ldd	r25, Z+1	; 0x01
 74a:	86 60       	ori	r24, 0x06	; 6
 74c:	91 83       	std	Z+1, r25	; 0x01
 74e:	80 83       	st	Z, r24
				return;
 750:	08 95       	ret
			case '9':
				UART_Puts("\r\n9 bits\r\n");
 752:	8b ef       	ldi	r24, 0xFB	; 251
 754:	93 e0       	ldi	r25, 0x03	; 3
 756:	ef dd       	rcall	.-1058   	; 0x336 <UART_Puts>
 758:	e1 ec       	ldi	r30, 0xC1	; 193
				*b_reg |= 1<<2;
 75a:	f0 e0       	ldi	r31, 0x00	; 0
 75c:	80 81       	ld	r24, Z
 75e:	91 81       	ldd	r25, Z+1	; 0x01
 760:	84 60       	ori	r24, 0x04	; 4
 762:	91 83       	std	Z+1, r25	; 0x01
 764:	80 83       	st	Z, r24
 766:	e2 ec       	ldi	r30, 0xC2	; 194
				*c_reg |= (1<<2);
				*c_reg |= (1<<1);
 768:	f0 e0       	ldi	r31, 0x00	; 0
 76a:	80 81       	ld	r24, Z
 76c:	91 81       	ldd	r25, Z+1	; 0x01
 76e:	86 60       	ori	r24, 0x06	; 6
 770:	91 83       	std	Z+1, r25	; 0x01
 772:	80 83       	st	Z, r24
 774:	08 95       	ret

00000776 <Parity_Set>:
 776:	86 e0       	ldi	r24, 0x06	; 6
*Changes the parity bit to predefined values based on user choice
*/
void Parity_Set(void) {
	unsigned int *parity = (int *) 0xC2;
	while (1) {
		UART_Puts("\r\nSelect one of the following parity modes\r\n(D)isabled (E)ven Parity (O)dd Parity (ESC) Menu\r\n");
 778:	94 e0       	ldi	r25, 0x04	; 4
 77a:	dd dd       	rcall	.-1094   	; 0x336 <UART_Puts>
		UART_Get();
 77c:	9d dd       	rcall	.-1222   	; 0x2b8 <UART_Get>
 77e:	80 91 0f 06 	lds	r24, 0x060F	; 0x80060f <ASCII>
		switch(ASCII) {
 782:	8f 34       	cpi	r24, 0x4F	; 79
 784:	f9 f0       	breq	.+62     	; 0x7c4 <Parity_Set+0x4e>
 786:	38 f4       	brcc	.+14     	; 0x796 <Parity_Set+0x20>
 788:	84 34       	cpi	r24, 0x44	; 68
 78a:	59 f0       	breq	.+22     	; 0x7a2 <Parity_Set+0x2c>
 78c:	85 34       	cpi	r24, 0x45	; 69
 78e:	89 f0       	breq	.+34     	; 0x7b2 <Parity_Set+0x3c>
 790:	8b 31       	cpi	r24, 0x1B	; 27
 792:	21 f1       	breq	.+72     	; 0x7dc <Parity_Set+0x66>
 794:	1f c0       	rjmp	.+62     	; 0x7d4 <Parity_Set+0x5e>
 796:	85 36       	cpi	r24, 0x65	; 101
 798:	61 f0       	breq	.+24     	; 0x7b2 <Parity_Set+0x3c>
 79a:	8f 36       	cpi	r24, 0x6F	; 111
 79c:	99 f0       	breq	.+38     	; 0x7c4 <Parity_Set+0x4e>
 79e:	84 36       	cpi	r24, 0x64	; 100
 7a0:	c9 f4       	brne	.+50     	; 0x7d4 <Parity_Set+0x5e>
 7a2:	e2 ec       	ldi	r30, 0xC2	; 194
			case 'd':
			case 'D':
				*parity &=~(1<<5);
				*parity &=~(1<<4);
 7a4:	f0 e0       	ldi	r31, 0x00	; 0
 7a6:	80 81       	ld	r24, Z
 7a8:	91 81       	ldd	r25, Z+1	; 0x01
 7aa:	8f 7c       	andi	r24, 0xCF	; 207
 7ac:	91 83       	std	Z+1, r25	; 0x01
 7ae:	80 83       	st	Z, r24
 7b0:	08 95       	ret
				return;
 7b2:	e2 ec       	ldi	r30, 0xC2	; 194
			case 'e':
			case 'E':
				*parity |= (1<<5);
				*parity &=~(1<<4);
 7b4:	f0 e0       	ldi	r31, 0x00	; 0
 7b6:	80 81       	ld	r24, Z
 7b8:	91 81       	ldd	r25, Z+1	; 0x01
 7ba:	8f 7e       	andi	r24, 0xEF	; 239
 7bc:	80 62       	ori	r24, 0x20	; 32
 7be:	91 83       	std	Z+1, r25	; 0x01
 7c0:	80 83       	st	Z, r24
 7c2:	08 95       	ret
				return;
 7c4:	e2 ec       	ldi	r30, 0xC2	; 194
			case 'o':
			case 'O':
				*parity |= (1<<5);
				*parity |= (1<<4);
 7c6:	f0 e0       	ldi	r31, 0x00	; 0
 7c8:	80 81       	ld	r24, Z
 7ca:	91 81       	ldd	r25, Z+1	; 0x01
 7cc:	80 63       	ori	r24, 0x30	; 48
 7ce:	91 83       	std	Z+1, r25	; 0x01
 7d0:	80 83       	st	Z, r24
 7d2:	08 95       	ret
				return;
 7d4:	8b e5       	ldi	r24, 0x5B	; 91
			case 27:
				return;
			default:
				UART_Puts("\r\nInvalid option\r\n");
 7d6:	93 e0       	ldi	r25, 0x03	; 3
 7d8:	ae dd       	rcall	.-1188   	; 0x336 <UART_Puts>
 7da:	cd cf       	rjmp	.-102    	; 0x776 <Parity_Set>
				break;
		}
	}
 7dc:	08 95       	ret

000007de <Stop_Set>:
 7de:	85 e6       	ldi	r24, 0x65	; 101
*Changes the stop bit to predefined values based on user choice
*/
void Stop_Set (void) {
	unsigned int data = (int *) 0xC2;
	while (1) {
		UART_Puts("\r\nSelect one of the following number of stop bits\r\n(1) bit (2) bits (ESC) Menu\r\n");
 7e0:	94 e0       	ldi	r25, 0x04	; 4
 7e2:	a9 dd       	rcall	.-1198   	; 0x336 <UART_Puts>
		UART_Get();
 7e4:	69 dd       	rcall	.-1326   	; 0x2b8 <UART_Get>
 7e6:	80 91 0f 06 	lds	r24, 0x060F	; 0x80060f <ASCII>
		switch (ASCII) {
 7ea:	8b 31       	cpi	r24, 0x1B	; 27
 7ec:	41 f0       	breq	.+16     	; 0x7fe <Stop_Set+0x20>
 7ee:	18 f0       	brcs	.+6      	; 0x7f6 <Stop_Set+0x18>
 7f0:	81 53       	subi	r24, 0x31	; 49
 7f2:	82 30       	cpi	r24, 0x02	; 2
 7f4:	20 f0       	brcs	.+8      	; 0x7fe <Stop_Set+0x20>
 7f6:	8b e5       	ldi	r24, 0x5B	; 91
				data |= 1<<3;
				return;
			case 27:
				return;
			default:
				UART_Puts("\r\nInvalid option\r\n");
 7f8:	93 e0       	ldi	r25, 0x03	; 3
 7fa:	9d dd       	rcall	.-1222   	; 0x336 <UART_Puts>
 7fc:	f0 cf       	rjmp	.-32     	; 0x7de <Stop_Set>
				break;
		}
	}
 7fe:	08 95       	ret

00000800 <USART>:
 800:	86 eb       	ldi	r24, 0xB6	; 182
*/
void USART(void) {
	int dataBits = 0;
	int parity = 0;
	int stopBits = 0;
	UART_Puts("\r\nSelect what you would like to change\r\n");
 802:	94 e0       	ldi	r25, 0x04	; 4
 804:	98 dd       	rcall	.-1232   	; 0x336 <UART_Puts>
	UART_Puts("\r\n(1)Baud Rate (2)Character Size (3)Parity (4)Stop bits (ESC) Menu\r\n");
 806:	8f ed       	ldi	r24, 0xDF	; 223
 808:	94 e0       	ldi	r25, 0x04	; 4
	UART_Get();
 80a:	95 dd       	rcall	.-1238   	; 0x336 <UART_Puts>
 80c:	55 dd       	rcall	.-1366   	; 0x2b8 <UART_Get>
	switch(ASCII) {
 80e:	80 91 0f 06 	lds	r24, 0x060F	; 0x80060f <ASCII>
 812:	82 33       	cpi	r24, 0x32	; 50
 814:	69 f0       	breq	.+26     	; 0x830 <USART+0x30>
 816:	28 f4       	brcc	.+10     	; 0x822 <USART+0x22>
 818:	8b 31       	cpi	r24, 0x1B	; 27
 81a:	99 f0       	breq	.+38     	; 0x842 <USART+0x42>
 81c:	81 33       	cpi	r24, 0x31	; 49
 81e:	31 f0       	breq	.+12     	; 0x82c <USART+0x2c>
 820:	0d c0       	rjmp	.+26     	; 0x83c <USART+0x3c>
 822:	83 33       	cpi	r24, 0x33	; 51
 824:	39 f0       	breq	.+14     	; 0x834 <USART+0x34>
 826:	84 33       	cpi	r24, 0x34	; 52
 828:	39 f0       	breq	.+14     	; 0x838 <USART+0x38>
		case '1': BAUD_Set();
 82a:	08 c0       	rjmp	.+16     	; 0x83c <USART+0x3c>
			break;
 82c:	f5 ce       	rjmp	.-534    	; 0x618 <BAUD_Set>
		case '2': Data_Size_Set();
 82e:	08 95       	ret
			break;
 830:	30 cf       	rjmp	.-416    	; 0x692 <Data_Size_Set>
		case '3': Parity_Set();
 832:	08 95       	ret
			break;
 834:	a0 cf       	rjmp	.-192    	; 0x776 <Parity_Set>
		case '4': Stop_Set();
 836:	08 95       	ret
 838:	d2 cf       	rjmp	.-92     	; 0x7de <Stop_Set>
			break;
 83a:	08 95       	ret
		case 27:
			return;
		default: UART_Puts("Invalid Option");
 83c:	84 e2       	ldi	r24, 0x24	; 36
 83e:	95 e0       	ldi	r25, 0x05	; 5
 840:	7a cd       	rjmp	.-1292   	; 0x336 <UART_Puts>
 842:	08 95       	ret

00000844 <Command>:
 844:	87 e8       	ldi	r24, 0x87	; 135
/**
* command interpreter
*/
void Command(void)					//command interpreter
{
	UART_Puts(MS3);
 846:	95 e0       	ldi	r25, 0x05	; 5
 848:	76 dd       	rcall	.-1300   	; 0x336 <UART_Puts>
	ASCII = '\0';						
 84a:	10 92 0f 06 	sts	0x060F, r1	; 0x80060f <ASCII>
	while (ASCII == '\0')
	{
		UART_Get();
 84e:	34 dd       	rcall	.-1432   	; 0x2b8 <UART_Get>
*/
void Command(void)					//command interpreter
{
	UART_Puts(MS3);
	ASCII = '\0';						
	while (ASCII == '\0')
 850:	e0 91 0f 06 	lds	r30, 0x060F	; 0x80060f <ASCII>
 854:	ee 23       	and	r30, r30
 856:	d9 f3       	breq	.-10     	; 0x84e <Command+0xa>
	{
		UART_Get();
	}
	switch (ASCII)
 858:	8e 2f       	mov	r24, r30
 85a:	90 e0       	ldi	r25, 0x00	; 0
 85c:	fc 01       	movw	r30, r24
 85e:	e1 54       	subi	r30, 0x41	; 65
 860:	f1 09       	sbc	r31, r1
 862:	e5 33       	cpi	r30, 0x35	; 53
 864:	f1 05       	cpc	r31, r1
 866:	58 f4       	brcc	.+22     	; 0x87e <Command+0x3a>
 868:	e0 58       	subi	r30, 0x80	; 128
 86a:	ff 4f       	sbci	r31, 0xFF	; 255
	{
		case 'l':
		case 'L': 
			LCD();
 86c:	78 c2       	rjmp	.+1264   	; 0xd5e <__tablejump2__>
			break;
 86e:	91 cd       	rjmp	.-1246   	; 0x392 <LCD>
		case 'a':
		case 'A': 
			ADC();
 870:	08 95       	ret
			break;
 872:	de cd       	rjmp	.-1092   	; 0x430 <ADC>
		case 'e':
		case 'E': 
			EEPROM();
 874:	08 95       	ret
			break;
		case 'u': 
		case 'U':
			USART();
 876:	8f ce       	rjmp	.-738    	; 0x596 <EEPROM>
 878:	08 95       	ret
			break;
 87a:	c2 cf       	rjmp	.-124    	; 0x800 <USART>
		default:
			UART_Puts(MS5);
 87c:	08 95       	ret
 87e:	8e e5       	ldi	r24, 0x5E	; 94
 880:	95 e0       	ldi	r25, 0x05	; 5
 882:	59 dd       	rcall	.-1358   	; 0x336 <UART_Puts>
			HELP();
 884:	82 cd       	rjmp	.-1276   	; 0x38a <HELP>
 886:	08 95       	ret

00000888 <main>:
 888:	b9 dc       	rcall	.-1678   	; 0x1fc <Mega328P_Init>
* main
*/
int main(void)
{
	Mega328P_Init();
	Banner();
 88a:	75 dd       	rcall	.-1302   	; 0x376 <Banner>
	while (1)
	{
		Command();				//infinite command loop
 88c:	db df       	rcall	.-74     	; 0x844 <Command>
 88e:	fe cf       	rjmp	.-4      	; 0x88c <main+0x4>

00000890 <__subsf3>:
 890:	50 58       	subi	r21, 0x80	; 128

00000892 <__addsf3>:
 892:	bb 27       	eor	r27, r27
 894:	aa 27       	eor	r26, r26
 896:	0e d0       	rcall	.+28     	; 0x8b4 <__addsf3x>
 898:	4d c1       	rjmp	.+666    	; 0xb34 <__fp_round>
 89a:	3e d1       	rcall	.+636    	; 0xb18 <__fp_pscA>
 89c:	30 f0       	brcs	.+12     	; 0x8aa <__addsf3+0x18>
 89e:	43 d1       	rcall	.+646    	; 0xb26 <__fp_pscB>
 8a0:	20 f0       	brcs	.+8      	; 0x8aa <__addsf3+0x18>
 8a2:	31 f4       	brne	.+12     	; 0x8b0 <__addsf3+0x1e>
 8a4:	9f 3f       	cpi	r25, 0xFF	; 255
 8a6:	11 f4       	brne	.+4      	; 0x8ac <__addsf3+0x1a>
 8a8:	1e f4       	brtc	.+6      	; 0x8b0 <__addsf3+0x1e>
 8aa:	33 c1       	rjmp	.+614    	; 0xb12 <__fp_nan>
 8ac:	0e f4       	brtc	.+2      	; 0x8b0 <__addsf3+0x1e>
 8ae:	e0 95       	com	r30
 8b0:	e7 fb       	bst	r30, 7
 8b2:	29 c1       	rjmp	.+594    	; 0xb06 <__fp_inf>

000008b4 <__addsf3x>:
 8b4:	e9 2f       	mov	r30, r25
 8b6:	4f d1       	rcall	.+670    	; 0xb56 <__fp_split3>
 8b8:	80 f3       	brcs	.-32     	; 0x89a <__addsf3+0x8>
 8ba:	ba 17       	cp	r27, r26
 8bc:	62 07       	cpc	r22, r18
 8be:	73 07       	cpc	r23, r19
 8c0:	84 07       	cpc	r24, r20
 8c2:	95 07       	cpc	r25, r21
 8c4:	18 f0       	brcs	.+6      	; 0x8cc <__addsf3x+0x18>
 8c6:	71 f4       	brne	.+28     	; 0x8e4 <__addsf3x+0x30>
 8c8:	9e f5       	brtc	.+102    	; 0x930 <__stack+0x31>
 8ca:	67 c1       	rjmp	.+718    	; 0xb9a <__fp_zero>
 8cc:	0e f4       	brtc	.+2      	; 0x8d0 <__addsf3x+0x1c>
 8ce:	e0 95       	com	r30
 8d0:	0b 2e       	mov	r0, r27
 8d2:	ba 2f       	mov	r27, r26
 8d4:	a0 2d       	mov	r26, r0
 8d6:	0b 01       	movw	r0, r22
 8d8:	b9 01       	movw	r22, r18
 8da:	90 01       	movw	r18, r0
 8dc:	0c 01       	movw	r0, r24
 8de:	ca 01       	movw	r24, r20
 8e0:	a0 01       	movw	r20, r0
 8e2:	11 24       	eor	r1, r1
 8e4:	ff 27       	eor	r31, r31
 8e6:	59 1b       	sub	r21, r25
 8e8:	99 f0       	breq	.+38     	; 0x910 <__stack+0x11>
 8ea:	59 3f       	cpi	r21, 0xF9	; 249
 8ec:	50 f4       	brcc	.+20     	; 0x902 <__stack+0x3>
 8ee:	50 3e       	cpi	r21, 0xE0	; 224
 8f0:	68 f1       	brcs	.+90     	; 0x94c <__stack+0x4d>
 8f2:	1a 16       	cp	r1, r26
 8f4:	f0 40       	sbci	r31, 0x00	; 0
 8f6:	a2 2f       	mov	r26, r18
 8f8:	23 2f       	mov	r18, r19
 8fa:	34 2f       	mov	r19, r20
 8fc:	44 27       	eor	r20, r20
 8fe:	58 5f       	subi	r21, 0xF8	; 248
 900:	f3 cf       	rjmp	.-26     	; 0x8e8 <__addsf3x+0x34>
 902:	46 95       	lsr	r20
 904:	37 95       	ror	r19
 906:	27 95       	ror	r18
 908:	a7 95       	ror	r26
 90a:	f0 40       	sbci	r31, 0x00	; 0
 90c:	53 95       	inc	r21
 90e:	c9 f7       	brne	.-14     	; 0x902 <__stack+0x3>
 910:	7e f4       	brtc	.+30     	; 0x930 <__stack+0x31>
 912:	1f 16       	cp	r1, r31
 914:	ba 0b       	sbc	r27, r26
 916:	62 0b       	sbc	r22, r18
 918:	73 0b       	sbc	r23, r19
 91a:	84 0b       	sbc	r24, r20
 91c:	ba f0       	brmi	.+46     	; 0x94c <__stack+0x4d>
 91e:	91 50       	subi	r25, 0x01	; 1
 920:	a1 f0       	breq	.+40     	; 0x94a <__stack+0x4b>
 922:	ff 0f       	add	r31, r31
 924:	bb 1f       	adc	r27, r27
 926:	66 1f       	adc	r22, r22
 928:	77 1f       	adc	r23, r23
 92a:	88 1f       	adc	r24, r24
 92c:	c2 f7       	brpl	.-16     	; 0x91e <__stack+0x1f>
 92e:	0e c0       	rjmp	.+28     	; 0x94c <__stack+0x4d>
 930:	ba 0f       	add	r27, r26
 932:	62 1f       	adc	r22, r18
 934:	73 1f       	adc	r23, r19
 936:	84 1f       	adc	r24, r20
 938:	48 f4       	brcc	.+18     	; 0x94c <__stack+0x4d>
 93a:	87 95       	ror	r24
 93c:	77 95       	ror	r23
 93e:	67 95       	ror	r22
 940:	b7 95       	ror	r27
 942:	f7 95       	ror	r31
 944:	9e 3f       	cpi	r25, 0xFE	; 254
 946:	08 f0       	brcs	.+2      	; 0x94a <__stack+0x4b>
 948:	b3 cf       	rjmp	.-154    	; 0x8b0 <__addsf3+0x1e>
 94a:	93 95       	inc	r25
 94c:	88 0f       	add	r24, r24
 94e:	08 f0       	brcs	.+2      	; 0x952 <__stack+0x53>
 950:	99 27       	eor	r25, r25
 952:	ee 0f       	add	r30, r30
 954:	97 95       	ror	r25
 956:	87 95       	ror	r24
 958:	08 95       	ret

0000095a <__divsf3>:
 95a:	0c d0       	rcall	.+24     	; 0x974 <__divsf3x>
 95c:	eb c0       	rjmp	.+470    	; 0xb34 <__fp_round>
 95e:	e3 d0       	rcall	.+454    	; 0xb26 <__fp_pscB>
 960:	40 f0       	brcs	.+16     	; 0x972 <__divsf3+0x18>
 962:	da d0       	rcall	.+436    	; 0xb18 <__fp_pscA>
 964:	30 f0       	brcs	.+12     	; 0x972 <__divsf3+0x18>
 966:	21 f4       	brne	.+8      	; 0x970 <__divsf3+0x16>
 968:	5f 3f       	cpi	r21, 0xFF	; 255
 96a:	19 f0       	breq	.+6      	; 0x972 <__divsf3+0x18>
 96c:	cc c0       	rjmp	.+408    	; 0xb06 <__fp_inf>
 96e:	51 11       	cpse	r21, r1
 970:	15 c1       	rjmp	.+554    	; 0xb9c <__fp_szero>
 972:	cf c0       	rjmp	.+414    	; 0xb12 <__fp_nan>

00000974 <__divsf3x>:
 974:	f0 d0       	rcall	.+480    	; 0xb56 <__fp_split3>
 976:	98 f3       	brcs	.-26     	; 0x95e <__divsf3+0x4>

00000978 <__divsf3_pse>:
 978:	99 23       	and	r25, r25
 97a:	c9 f3       	breq	.-14     	; 0x96e <__divsf3+0x14>
 97c:	55 23       	and	r21, r21
 97e:	b1 f3       	breq	.-20     	; 0x96c <__divsf3+0x12>
 980:	95 1b       	sub	r25, r21
 982:	55 0b       	sbc	r21, r21
 984:	bb 27       	eor	r27, r27
 986:	aa 27       	eor	r26, r26
 988:	62 17       	cp	r22, r18
 98a:	73 07       	cpc	r23, r19
 98c:	84 07       	cpc	r24, r20
 98e:	38 f0       	brcs	.+14     	; 0x99e <__divsf3_pse+0x26>
 990:	9f 5f       	subi	r25, 0xFF	; 255
 992:	5f 4f       	sbci	r21, 0xFF	; 255
 994:	22 0f       	add	r18, r18
 996:	33 1f       	adc	r19, r19
 998:	44 1f       	adc	r20, r20
 99a:	aa 1f       	adc	r26, r26
 99c:	a9 f3       	breq	.-22     	; 0x988 <__divsf3_pse+0x10>
 99e:	33 d0       	rcall	.+102    	; 0xa06 <__divsf3_pse+0x8e>
 9a0:	0e 2e       	mov	r0, r30
 9a2:	3a f0       	brmi	.+14     	; 0x9b2 <__divsf3_pse+0x3a>
 9a4:	e0 e8       	ldi	r30, 0x80	; 128
 9a6:	30 d0       	rcall	.+96     	; 0xa08 <__divsf3_pse+0x90>
 9a8:	91 50       	subi	r25, 0x01	; 1
 9aa:	50 40       	sbci	r21, 0x00	; 0
 9ac:	e6 95       	lsr	r30
 9ae:	00 1c       	adc	r0, r0
 9b0:	ca f7       	brpl	.-14     	; 0x9a4 <__divsf3_pse+0x2c>
 9b2:	29 d0       	rcall	.+82     	; 0xa06 <__divsf3_pse+0x8e>
 9b4:	fe 2f       	mov	r31, r30
 9b6:	27 d0       	rcall	.+78     	; 0xa06 <__divsf3_pse+0x8e>
 9b8:	66 0f       	add	r22, r22
 9ba:	77 1f       	adc	r23, r23
 9bc:	88 1f       	adc	r24, r24
 9be:	bb 1f       	adc	r27, r27
 9c0:	26 17       	cp	r18, r22
 9c2:	37 07       	cpc	r19, r23
 9c4:	48 07       	cpc	r20, r24
 9c6:	ab 07       	cpc	r26, r27
 9c8:	b0 e8       	ldi	r27, 0x80	; 128
 9ca:	09 f0       	breq	.+2      	; 0x9ce <__divsf3_pse+0x56>
 9cc:	bb 0b       	sbc	r27, r27
 9ce:	80 2d       	mov	r24, r0
 9d0:	bf 01       	movw	r22, r30
 9d2:	ff 27       	eor	r31, r31
 9d4:	93 58       	subi	r25, 0x83	; 131
 9d6:	5f 4f       	sbci	r21, 0xFF	; 255
 9d8:	2a f0       	brmi	.+10     	; 0x9e4 <__divsf3_pse+0x6c>
 9da:	9e 3f       	cpi	r25, 0xFE	; 254
 9dc:	51 05       	cpc	r21, r1
 9de:	68 f0       	brcs	.+26     	; 0x9fa <__divsf3_pse+0x82>
 9e0:	92 c0       	rjmp	.+292    	; 0xb06 <__fp_inf>
 9e2:	dc c0       	rjmp	.+440    	; 0xb9c <__fp_szero>
 9e4:	5f 3f       	cpi	r21, 0xFF	; 255
 9e6:	ec f3       	brlt	.-6      	; 0x9e2 <__divsf3_pse+0x6a>
 9e8:	98 3e       	cpi	r25, 0xE8	; 232
 9ea:	dc f3       	brlt	.-10     	; 0x9e2 <__divsf3_pse+0x6a>
 9ec:	86 95       	lsr	r24
 9ee:	77 95       	ror	r23
 9f0:	67 95       	ror	r22
 9f2:	b7 95       	ror	r27
 9f4:	f7 95       	ror	r31
 9f6:	9f 5f       	subi	r25, 0xFF	; 255
 9f8:	c9 f7       	brne	.-14     	; 0x9ec <__divsf3_pse+0x74>
 9fa:	88 0f       	add	r24, r24
 9fc:	91 1d       	adc	r25, r1
 9fe:	96 95       	lsr	r25
 a00:	87 95       	ror	r24
 a02:	97 f9       	bld	r25, 7
 a04:	08 95       	ret
 a06:	e1 e0       	ldi	r30, 0x01	; 1
 a08:	66 0f       	add	r22, r22
 a0a:	77 1f       	adc	r23, r23
 a0c:	88 1f       	adc	r24, r24
 a0e:	bb 1f       	adc	r27, r27
 a10:	62 17       	cp	r22, r18
 a12:	73 07       	cpc	r23, r19
 a14:	84 07       	cpc	r24, r20
 a16:	ba 07       	cpc	r27, r26
 a18:	20 f0       	brcs	.+8      	; 0xa22 <__divsf3_pse+0xaa>
 a1a:	62 1b       	sub	r22, r18
 a1c:	73 0b       	sbc	r23, r19
 a1e:	84 0b       	sbc	r24, r20
 a20:	ba 0b       	sbc	r27, r26
 a22:	ee 1f       	adc	r30, r30
 a24:	88 f7       	brcc	.-30     	; 0xa08 <__divsf3_pse+0x90>
 a26:	e0 95       	com	r30
 a28:	08 95       	ret

00000a2a <__fixsfsi>:
 a2a:	04 d0       	rcall	.+8      	; 0xa34 <__fixunssfsi>
 a2c:	68 94       	set
 a2e:	b1 11       	cpse	r27, r1
 a30:	b5 c0       	rjmp	.+362    	; 0xb9c <__fp_szero>
 a32:	08 95       	ret

00000a34 <__fixunssfsi>:
 a34:	98 d0       	rcall	.+304    	; 0xb66 <__fp_splitA>
 a36:	88 f0       	brcs	.+34     	; 0xa5a <__fixunssfsi+0x26>
 a38:	9f 57       	subi	r25, 0x7F	; 127
 a3a:	90 f0       	brcs	.+36     	; 0xa60 <__fixunssfsi+0x2c>
 a3c:	b9 2f       	mov	r27, r25
 a3e:	99 27       	eor	r25, r25
 a40:	b7 51       	subi	r27, 0x17	; 23
 a42:	a0 f0       	brcs	.+40     	; 0xa6c <__fixunssfsi+0x38>
 a44:	d1 f0       	breq	.+52     	; 0xa7a <__fixunssfsi+0x46>
 a46:	66 0f       	add	r22, r22
 a48:	77 1f       	adc	r23, r23
 a4a:	88 1f       	adc	r24, r24
 a4c:	99 1f       	adc	r25, r25
 a4e:	1a f0       	brmi	.+6      	; 0xa56 <__fixunssfsi+0x22>
 a50:	ba 95       	dec	r27
 a52:	c9 f7       	brne	.-14     	; 0xa46 <__fixunssfsi+0x12>
 a54:	12 c0       	rjmp	.+36     	; 0xa7a <__fixunssfsi+0x46>
 a56:	b1 30       	cpi	r27, 0x01	; 1
 a58:	81 f0       	breq	.+32     	; 0xa7a <__fixunssfsi+0x46>
 a5a:	9f d0       	rcall	.+318    	; 0xb9a <__fp_zero>
 a5c:	b1 e0       	ldi	r27, 0x01	; 1
 a5e:	08 95       	ret
 a60:	9c c0       	rjmp	.+312    	; 0xb9a <__fp_zero>
 a62:	67 2f       	mov	r22, r23
 a64:	78 2f       	mov	r23, r24
 a66:	88 27       	eor	r24, r24
 a68:	b8 5f       	subi	r27, 0xF8	; 248
 a6a:	39 f0       	breq	.+14     	; 0xa7a <__fixunssfsi+0x46>
 a6c:	b9 3f       	cpi	r27, 0xF9	; 249
 a6e:	cc f3       	brlt	.-14     	; 0xa62 <__fixunssfsi+0x2e>
 a70:	86 95       	lsr	r24
 a72:	77 95       	ror	r23
 a74:	67 95       	ror	r22
 a76:	b3 95       	inc	r27
 a78:	d9 f7       	brne	.-10     	; 0xa70 <__fixunssfsi+0x3c>
 a7a:	3e f4       	brtc	.+14     	; 0xa8a <__fixunssfsi+0x56>
 a7c:	90 95       	com	r25
 a7e:	80 95       	com	r24
 a80:	70 95       	com	r23
 a82:	61 95       	neg	r22
 a84:	7f 4f       	sbci	r23, 0xFF	; 255
 a86:	8f 4f       	sbci	r24, 0xFF	; 255
 a88:	9f 4f       	sbci	r25, 0xFF	; 255
 a8a:	08 95       	ret

00000a8c <__floatunsisf>:
 a8c:	e8 94       	clt
 a8e:	09 c0       	rjmp	.+18     	; 0xaa2 <__floatsisf+0x12>

00000a90 <__floatsisf>:
 a90:	97 fb       	bst	r25, 7
 a92:	3e f4       	brtc	.+14     	; 0xaa2 <__floatsisf+0x12>
 a94:	90 95       	com	r25
 a96:	80 95       	com	r24
 a98:	70 95       	com	r23
 a9a:	61 95       	neg	r22
 a9c:	7f 4f       	sbci	r23, 0xFF	; 255
 a9e:	8f 4f       	sbci	r24, 0xFF	; 255
 aa0:	9f 4f       	sbci	r25, 0xFF	; 255
 aa2:	99 23       	and	r25, r25
 aa4:	a9 f0       	breq	.+42     	; 0xad0 <__floatsisf+0x40>
 aa6:	f9 2f       	mov	r31, r25
 aa8:	96 e9       	ldi	r25, 0x96	; 150
 aaa:	bb 27       	eor	r27, r27
 aac:	93 95       	inc	r25
 aae:	f6 95       	lsr	r31
 ab0:	87 95       	ror	r24
 ab2:	77 95       	ror	r23
 ab4:	67 95       	ror	r22
 ab6:	b7 95       	ror	r27
 ab8:	f1 11       	cpse	r31, r1
 aba:	f8 cf       	rjmp	.-16     	; 0xaac <__floatsisf+0x1c>
 abc:	fa f4       	brpl	.+62     	; 0xafc <__floatsisf+0x6c>
 abe:	bb 0f       	add	r27, r27
 ac0:	11 f4       	brne	.+4      	; 0xac6 <__floatsisf+0x36>
 ac2:	60 ff       	sbrs	r22, 0
 ac4:	1b c0       	rjmp	.+54     	; 0xafc <__floatsisf+0x6c>
 ac6:	6f 5f       	subi	r22, 0xFF	; 255
 ac8:	7f 4f       	sbci	r23, 0xFF	; 255
 aca:	8f 4f       	sbci	r24, 0xFF	; 255
 acc:	9f 4f       	sbci	r25, 0xFF	; 255
 ace:	16 c0       	rjmp	.+44     	; 0xafc <__floatsisf+0x6c>
 ad0:	88 23       	and	r24, r24
 ad2:	11 f0       	breq	.+4      	; 0xad8 <__floatsisf+0x48>
 ad4:	96 e9       	ldi	r25, 0x96	; 150
 ad6:	11 c0       	rjmp	.+34     	; 0xafa <__floatsisf+0x6a>
 ad8:	77 23       	and	r23, r23
 ada:	21 f0       	breq	.+8      	; 0xae4 <__floatsisf+0x54>
 adc:	9e e8       	ldi	r25, 0x8E	; 142
 ade:	87 2f       	mov	r24, r23
 ae0:	76 2f       	mov	r23, r22
 ae2:	05 c0       	rjmp	.+10     	; 0xaee <__floatsisf+0x5e>
 ae4:	66 23       	and	r22, r22
 ae6:	71 f0       	breq	.+28     	; 0xb04 <__floatsisf+0x74>
 ae8:	96 e8       	ldi	r25, 0x86	; 134
 aea:	86 2f       	mov	r24, r22
 aec:	70 e0       	ldi	r23, 0x00	; 0
 aee:	60 e0       	ldi	r22, 0x00	; 0
 af0:	2a f0       	brmi	.+10     	; 0xafc <__floatsisf+0x6c>
 af2:	9a 95       	dec	r25
 af4:	66 0f       	add	r22, r22
 af6:	77 1f       	adc	r23, r23
 af8:	88 1f       	adc	r24, r24
 afa:	da f7       	brpl	.-10     	; 0xaf2 <__floatsisf+0x62>
 afc:	88 0f       	add	r24, r24
 afe:	96 95       	lsr	r25
 b00:	87 95       	ror	r24
 b02:	97 f9       	bld	r25, 7
 b04:	08 95       	ret

00000b06 <__fp_inf>:
 b06:	97 f9       	bld	r25, 7
 b08:	9f 67       	ori	r25, 0x7F	; 127
 b0a:	80 e8       	ldi	r24, 0x80	; 128
 b0c:	70 e0       	ldi	r23, 0x00	; 0
 b0e:	60 e0       	ldi	r22, 0x00	; 0
 b10:	08 95       	ret

00000b12 <__fp_nan>:
 b12:	9f ef       	ldi	r25, 0xFF	; 255
 b14:	80 ec       	ldi	r24, 0xC0	; 192
 b16:	08 95       	ret

00000b18 <__fp_pscA>:
 b18:	00 24       	eor	r0, r0
 b1a:	0a 94       	dec	r0
 b1c:	16 16       	cp	r1, r22
 b1e:	17 06       	cpc	r1, r23
 b20:	18 06       	cpc	r1, r24
 b22:	09 06       	cpc	r0, r25
 b24:	08 95       	ret

00000b26 <__fp_pscB>:
 b26:	00 24       	eor	r0, r0
 b28:	0a 94       	dec	r0
 b2a:	12 16       	cp	r1, r18
 b2c:	13 06       	cpc	r1, r19
 b2e:	14 06       	cpc	r1, r20
 b30:	05 06       	cpc	r0, r21
 b32:	08 95       	ret

00000b34 <__fp_round>:
 b34:	09 2e       	mov	r0, r25
 b36:	03 94       	inc	r0
 b38:	00 0c       	add	r0, r0
 b3a:	11 f4       	brne	.+4      	; 0xb40 <__fp_round+0xc>
 b3c:	88 23       	and	r24, r24
 b3e:	52 f0       	brmi	.+20     	; 0xb54 <__fp_round+0x20>
 b40:	bb 0f       	add	r27, r27
 b42:	40 f4       	brcc	.+16     	; 0xb54 <__fp_round+0x20>
 b44:	bf 2b       	or	r27, r31
 b46:	11 f4       	brne	.+4      	; 0xb4c <__fp_round+0x18>
 b48:	60 ff       	sbrs	r22, 0
 b4a:	04 c0       	rjmp	.+8      	; 0xb54 <__fp_round+0x20>
 b4c:	6f 5f       	subi	r22, 0xFF	; 255
 b4e:	7f 4f       	sbci	r23, 0xFF	; 255
 b50:	8f 4f       	sbci	r24, 0xFF	; 255
 b52:	9f 4f       	sbci	r25, 0xFF	; 255
 b54:	08 95       	ret

00000b56 <__fp_split3>:
 b56:	57 fd       	sbrc	r21, 7
 b58:	90 58       	subi	r25, 0x80	; 128
 b5a:	44 0f       	add	r20, r20
 b5c:	55 1f       	adc	r21, r21
 b5e:	59 f0       	breq	.+22     	; 0xb76 <__fp_splitA+0x10>
 b60:	5f 3f       	cpi	r21, 0xFF	; 255
 b62:	71 f0       	breq	.+28     	; 0xb80 <__fp_splitA+0x1a>
 b64:	47 95       	ror	r20

00000b66 <__fp_splitA>:
 b66:	88 0f       	add	r24, r24
 b68:	97 fb       	bst	r25, 7
 b6a:	99 1f       	adc	r25, r25
 b6c:	61 f0       	breq	.+24     	; 0xb86 <__fp_splitA+0x20>
 b6e:	9f 3f       	cpi	r25, 0xFF	; 255
 b70:	79 f0       	breq	.+30     	; 0xb90 <__fp_splitA+0x2a>
 b72:	87 95       	ror	r24
 b74:	08 95       	ret
 b76:	12 16       	cp	r1, r18
 b78:	13 06       	cpc	r1, r19
 b7a:	14 06       	cpc	r1, r20
 b7c:	55 1f       	adc	r21, r21
 b7e:	f2 cf       	rjmp	.-28     	; 0xb64 <__fp_split3+0xe>
 b80:	46 95       	lsr	r20
 b82:	f1 df       	rcall	.-30     	; 0xb66 <__fp_splitA>
 b84:	08 c0       	rjmp	.+16     	; 0xb96 <__fp_splitA+0x30>
 b86:	16 16       	cp	r1, r22
 b88:	17 06       	cpc	r1, r23
 b8a:	18 06       	cpc	r1, r24
 b8c:	99 1f       	adc	r25, r25
 b8e:	f1 cf       	rjmp	.-30     	; 0xb72 <__fp_splitA+0xc>
 b90:	86 95       	lsr	r24
 b92:	71 05       	cpc	r23, r1
 b94:	61 05       	cpc	r22, r1
 b96:	08 94       	sec
 b98:	08 95       	ret

00000b9a <__fp_zero>:
 b9a:	e8 94       	clt

00000b9c <__fp_szero>:
 b9c:	bb 27       	eor	r27, r27
 b9e:	66 27       	eor	r22, r22
 ba0:	77 27       	eor	r23, r23
 ba2:	cb 01       	movw	r24, r22
 ba4:	97 f9       	bld	r25, 7
 ba6:	08 95       	ret
 ba8:	0e f0       	brts	.+2      	; 0xbac <__fp_szero+0x10>
 baa:	a6 c0       	rjmp	.+332    	; 0xcf8 <__fp_mpack>
 bac:	b2 cf       	rjmp	.-156    	; 0xb12 <__fp_nan>
 bae:	68 94       	set
 bb0:	aa cf       	rjmp	.-172    	; 0xb06 <__fp_inf>

00000bb2 <log>:
 bb2:	d9 df       	rcall	.-78     	; 0xb66 <__fp_splitA>
 bb4:	c8 f3       	brcs	.-14     	; 0xba8 <__fp_szero+0xc>
 bb6:	99 23       	and	r25, r25
 bb8:	d1 f3       	breq	.-12     	; 0xbae <__fp_szero+0x12>
 bba:	c6 f3       	brts	.-16     	; 0xbac <__fp_szero+0x10>
 bbc:	df 93       	push	r29
 bbe:	cf 93       	push	r28
 bc0:	1f 93       	push	r17
 bc2:	0f 93       	push	r16
 bc4:	ff 92       	push	r15
 bc6:	c9 2f       	mov	r28, r25
 bc8:	dd 27       	eor	r29, r29
 bca:	88 23       	and	r24, r24
 bcc:	2a f0       	brmi	.+10     	; 0xbd8 <log+0x26>
 bce:	21 97       	sbiw	r28, 0x01	; 1
 bd0:	66 0f       	add	r22, r22
 bd2:	77 1f       	adc	r23, r23
 bd4:	88 1f       	adc	r24, r24
 bd6:	da f7       	brpl	.-10     	; 0xbce <log+0x1c>
 bd8:	20 e0       	ldi	r18, 0x00	; 0
 bda:	30 e0       	ldi	r19, 0x00	; 0
 bdc:	40 e8       	ldi	r20, 0x80	; 128
 bde:	5f eb       	ldi	r21, 0xBF	; 191
 be0:	9f e3       	ldi	r25, 0x3F	; 63
 be2:	88 39       	cpi	r24, 0x98	; 152
 be4:	20 f0       	brcs	.+8      	; 0xbee <log+0x3c>
 be6:	80 3e       	cpi	r24, 0xE0	; 224
 be8:	30 f0       	brcs	.+12     	; 0xbf6 <log+0x44>
 bea:	21 96       	adiw	r28, 0x01	; 1
 bec:	8f 77       	andi	r24, 0x7F	; 127
 bee:	51 de       	rcall	.-862    	; 0x892 <__addsf3>
 bf0:	ea e6       	ldi	r30, 0x6A	; 106
 bf2:	f1 e0       	ldi	r31, 0x01	; 1
 bf4:	03 c0       	rjmp	.+6      	; 0xbfc <log+0x4a>
 bf6:	4d de       	rcall	.-870    	; 0x892 <__addsf3>
 bf8:	e7 e9       	ldi	r30, 0x97	; 151
 bfa:	f1 e0       	ldi	r31, 0x01	; 1
 bfc:	8b d0       	rcall	.+278    	; 0xd14 <__fp_powser>
 bfe:	8b 01       	movw	r16, r22
 c00:	be 01       	movw	r22, r28
 c02:	ec 01       	movw	r28, r24
 c04:	fb 2e       	mov	r15, r27
 c06:	6f 57       	subi	r22, 0x7F	; 127
 c08:	71 09       	sbc	r23, r1
 c0a:	75 95       	asr	r23
 c0c:	77 1f       	adc	r23, r23
 c0e:	88 0b       	sbc	r24, r24
 c10:	99 0b       	sbc	r25, r25
 c12:	3e df       	rcall	.-388    	; 0xa90 <__floatsisf>
 c14:	28 e1       	ldi	r18, 0x18	; 24
 c16:	32 e7       	ldi	r19, 0x72	; 114
 c18:	41 e3       	ldi	r20, 0x31	; 49
 c1a:	5f e3       	ldi	r21, 0x3F	; 63
 c1c:	16 d0       	rcall	.+44     	; 0xc4a <__mulsf3x>
 c1e:	af 2d       	mov	r26, r15
 c20:	98 01       	movw	r18, r16
 c22:	ae 01       	movw	r20, r28
 c24:	ff 90       	pop	r15
 c26:	0f 91       	pop	r16
 c28:	1f 91       	pop	r17
 c2a:	cf 91       	pop	r28
 c2c:	df 91       	pop	r29
 c2e:	42 de       	rcall	.-892    	; 0x8b4 <__addsf3x>
 c30:	81 cf       	rjmp	.-254    	; 0xb34 <__fp_round>

00000c32 <__mulsf3>:
 c32:	0b d0       	rcall	.+22     	; 0xc4a <__mulsf3x>
 c34:	7f cf       	rjmp	.-258    	; 0xb34 <__fp_round>
 c36:	70 df       	rcall	.-288    	; 0xb18 <__fp_pscA>
 c38:	28 f0       	brcs	.+10     	; 0xc44 <__mulsf3+0x12>
 c3a:	75 df       	rcall	.-278    	; 0xb26 <__fp_pscB>
 c3c:	18 f0       	brcs	.+6      	; 0xc44 <__mulsf3+0x12>
 c3e:	95 23       	and	r25, r21
 c40:	09 f0       	breq	.+2      	; 0xc44 <__mulsf3+0x12>
 c42:	61 cf       	rjmp	.-318    	; 0xb06 <__fp_inf>
 c44:	66 cf       	rjmp	.-308    	; 0xb12 <__fp_nan>
 c46:	11 24       	eor	r1, r1
 c48:	a9 cf       	rjmp	.-174    	; 0xb9c <__fp_szero>

00000c4a <__mulsf3x>:
 c4a:	85 df       	rcall	.-246    	; 0xb56 <__fp_split3>
 c4c:	a0 f3       	brcs	.-24     	; 0xc36 <__mulsf3+0x4>

00000c4e <__mulsf3_pse>:
 c4e:	95 9f       	mul	r25, r21
 c50:	d1 f3       	breq	.-12     	; 0xc46 <__mulsf3+0x14>
 c52:	95 0f       	add	r25, r21
 c54:	50 e0       	ldi	r21, 0x00	; 0
 c56:	55 1f       	adc	r21, r21
 c58:	62 9f       	mul	r22, r18
 c5a:	f0 01       	movw	r30, r0
 c5c:	72 9f       	mul	r23, r18
 c5e:	bb 27       	eor	r27, r27
 c60:	f0 0d       	add	r31, r0
 c62:	b1 1d       	adc	r27, r1
 c64:	63 9f       	mul	r22, r19
 c66:	aa 27       	eor	r26, r26
 c68:	f0 0d       	add	r31, r0
 c6a:	b1 1d       	adc	r27, r1
 c6c:	aa 1f       	adc	r26, r26
 c6e:	64 9f       	mul	r22, r20
 c70:	66 27       	eor	r22, r22
 c72:	b0 0d       	add	r27, r0
 c74:	a1 1d       	adc	r26, r1
 c76:	66 1f       	adc	r22, r22
 c78:	82 9f       	mul	r24, r18
 c7a:	22 27       	eor	r18, r18
 c7c:	b0 0d       	add	r27, r0
 c7e:	a1 1d       	adc	r26, r1
 c80:	62 1f       	adc	r22, r18
 c82:	73 9f       	mul	r23, r19
 c84:	b0 0d       	add	r27, r0
 c86:	a1 1d       	adc	r26, r1
 c88:	62 1f       	adc	r22, r18
 c8a:	83 9f       	mul	r24, r19
 c8c:	a0 0d       	add	r26, r0
 c8e:	61 1d       	adc	r22, r1
 c90:	22 1f       	adc	r18, r18
 c92:	74 9f       	mul	r23, r20
 c94:	33 27       	eor	r19, r19
 c96:	a0 0d       	add	r26, r0
 c98:	61 1d       	adc	r22, r1
 c9a:	23 1f       	adc	r18, r19
 c9c:	84 9f       	mul	r24, r20
 c9e:	60 0d       	add	r22, r0
 ca0:	21 1d       	adc	r18, r1
 ca2:	82 2f       	mov	r24, r18
 ca4:	76 2f       	mov	r23, r22
 ca6:	6a 2f       	mov	r22, r26
 ca8:	11 24       	eor	r1, r1
 caa:	9f 57       	subi	r25, 0x7F	; 127
 cac:	50 40       	sbci	r21, 0x00	; 0
 cae:	8a f0       	brmi	.+34     	; 0xcd2 <__mulsf3_pse+0x84>
 cb0:	e1 f0       	breq	.+56     	; 0xcea <__mulsf3_pse+0x9c>
 cb2:	88 23       	and	r24, r24
 cb4:	4a f0       	brmi	.+18     	; 0xcc8 <__mulsf3_pse+0x7a>
 cb6:	ee 0f       	add	r30, r30
 cb8:	ff 1f       	adc	r31, r31
 cba:	bb 1f       	adc	r27, r27
 cbc:	66 1f       	adc	r22, r22
 cbe:	77 1f       	adc	r23, r23
 cc0:	88 1f       	adc	r24, r24
 cc2:	91 50       	subi	r25, 0x01	; 1
 cc4:	50 40       	sbci	r21, 0x00	; 0
 cc6:	a9 f7       	brne	.-22     	; 0xcb2 <__mulsf3_pse+0x64>
 cc8:	9e 3f       	cpi	r25, 0xFE	; 254
 cca:	51 05       	cpc	r21, r1
 ccc:	70 f0       	brcs	.+28     	; 0xcea <__mulsf3_pse+0x9c>
 cce:	1b cf       	rjmp	.-458    	; 0xb06 <__fp_inf>
 cd0:	65 cf       	rjmp	.-310    	; 0xb9c <__fp_szero>
 cd2:	5f 3f       	cpi	r21, 0xFF	; 255
 cd4:	ec f3       	brlt	.-6      	; 0xcd0 <__mulsf3_pse+0x82>
 cd6:	98 3e       	cpi	r25, 0xE8	; 232
 cd8:	dc f3       	brlt	.-10     	; 0xcd0 <__mulsf3_pse+0x82>
 cda:	86 95       	lsr	r24
 cdc:	77 95       	ror	r23
 cde:	67 95       	ror	r22
 ce0:	b7 95       	ror	r27
 ce2:	f7 95       	ror	r31
 ce4:	e7 95       	ror	r30
 ce6:	9f 5f       	subi	r25, 0xFF	; 255
 ce8:	c1 f7       	brne	.-16     	; 0xcda <__mulsf3_pse+0x8c>
 cea:	fe 2b       	or	r31, r30
 cec:	88 0f       	add	r24, r24
 cee:	91 1d       	adc	r25, r1
 cf0:	96 95       	lsr	r25
 cf2:	87 95       	ror	r24
 cf4:	97 f9       	bld	r25, 7
 cf6:	08 95       	ret

00000cf8 <__fp_mpack>:
 cf8:	9f 3f       	cpi	r25, 0xFF	; 255
 cfa:	31 f0       	breq	.+12     	; 0xd08 <__fp_mpack_finite+0xc>

00000cfc <__fp_mpack_finite>:
 cfc:	91 50       	subi	r25, 0x01	; 1
 cfe:	20 f4       	brcc	.+8      	; 0xd08 <__fp_mpack_finite+0xc>
 d00:	87 95       	ror	r24
 d02:	77 95       	ror	r23
 d04:	67 95       	ror	r22
 d06:	b7 95       	ror	r27
 d08:	88 0f       	add	r24, r24
 d0a:	91 1d       	adc	r25, r1
 d0c:	96 95       	lsr	r25
 d0e:	87 95       	ror	r24
 d10:	97 f9       	bld	r25, 7
 d12:	08 95       	ret

00000d14 <__fp_powser>:
 d14:	df 93       	push	r29
 d16:	cf 93       	push	r28
 d18:	1f 93       	push	r17
 d1a:	0f 93       	push	r16
 d1c:	ff 92       	push	r15
 d1e:	ef 92       	push	r14
 d20:	df 92       	push	r13
 d22:	7b 01       	movw	r14, r22
 d24:	8c 01       	movw	r16, r24
 d26:	68 94       	set
 d28:	05 c0       	rjmp	.+10     	; 0xd34 <__fp_powser+0x20>
 d2a:	da 2e       	mov	r13, r26
 d2c:	ef 01       	movw	r28, r30
 d2e:	8d df       	rcall	.-230    	; 0xc4a <__mulsf3x>
 d30:	fe 01       	movw	r30, r28
 d32:	e8 94       	clt
 d34:	a5 91       	lpm	r26, Z+
 d36:	25 91       	lpm	r18, Z+
 d38:	35 91       	lpm	r19, Z+
 d3a:	45 91       	lpm	r20, Z+
 d3c:	55 91       	lpm	r21, Z+
 d3e:	ae f3       	brts	.-22     	; 0xd2a <__fp_powser+0x16>
 d40:	ef 01       	movw	r28, r30
 d42:	b8 dd       	rcall	.-1168   	; 0x8b4 <__addsf3x>
 d44:	fe 01       	movw	r30, r28
 d46:	97 01       	movw	r18, r14
 d48:	a8 01       	movw	r20, r16
 d4a:	da 94       	dec	r13
 d4c:	79 f7       	brne	.-34     	; 0xd2c <__fp_powser+0x18>
 d4e:	df 90       	pop	r13
 d50:	ef 90       	pop	r14
 d52:	ff 90       	pop	r15
 d54:	0f 91       	pop	r16
 d56:	1f 91       	pop	r17
 d58:	cf 91       	pop	r28
 d5a:	df 91       	pop	r29
 d5c:	08 95       	ret

00000d5e <__tablejump2__>:
 d5e:	ee 0f       	add	r30, r30
 d60:	ff 1f       	adc	r31, r31
 d62:	05 90       	lpm	r0, Z+
 d64:	f4 91       	lpm	r31, Z
 d66:	e0 2d       	mov	r30, r0
 d68:	09 94       	ijmp

00000d6a <__itoa_ncheck>:
 d6a:	bb 27       	eor	r27, r27
 d6c:	4a 30       	cpi	r20, 0x0A	; 10
 d6e:	31 f4       	brne	.+12     	; 0xd7c <__itoa_ncheck+0x12>
 d70:	99 23       	and	r25, r25
 d72:	22 f4       	brpl	.+8      	; 0xd7c <__itoa_ncheck+0x12>
 d74:	bd e2       	ldi	r27, 0x2D	; 45
 d76:	90 95       	com	r25
 d78:	81 95       	neg	r24
 d7a:	9f 4f       	sbci	r25, 0xFF	; 255
 d7c:	01 c0       	rjmp	.+2      	; 0xd80 <__utoa_common>

00000d7e <__utoa_ncheck>:
 d7e:	bb 27       	eor	r27, r27

00000d80 <__utoa_common>:
 d80:	fb 01       	movw	r30, r22
 d82:	55 27       	eor	r21, r21
 d84:	aa 27       	eor	r26, r26
 d86:	88 0f       	add	r24, r24
 d88:	99 1f       	adc	r25, r25
 d8a:	aa 1f       	adc	r26, r26
 d8c:	a4 17       	cp	r26, r20
 d8e:	10 f0       	brcs	.+4      	; 0xd94 <__utoa_common+0x14>
 d90:	a4 1b       	sub	r26, r20
 d92:	83 95       	inc	r24
 d94:	50 51       	subi	r21, 0x10	; 16
 d96:	b9 f7       	brne	.-18     	; 0xd86 <__utoa_common+0x6>
 d98:	a0 5d       	subi	r26, 0xD0	; 208
 d9a:	aa 33       	cpi	r26, 0x3A	; 58
 d9c:	08 f0       	brcs	.+2      	; 0xda0 <__utoa_common+0x20>
 d9e:	a9 5d       	subi	r26, 0xD9	; 217
 da0:	a1 93       	st	Z+, r26
 da2:	00 97       	sbiw	r24, 0x00	; 0
 da4:	79 f7       	brne	.-34     	; 0xd84 <__utoa_common+0x4>
 da6:	b1 11       	cpse	r27, r1
 da8:	b1 93       	st	Z+, r27
 daa:	11 92       	st	Z+, r1
 dac:	cb 01       	movw	r24, r22
 dae:	00 c0       	rjmp	.+0      	; 0xdb0 <strrev>

00000db0 <strrev>:
 db0:	dc 01       	movw	r26, r24
 db2:	fc 01       	movw	r30, r24
 db4:	67 2f       	mov	r22, r23
 db6:	71 91       	ld	r23, Z+
 db8:	77 23       	and	r23, r23
 dba:	e1 f7       	brne	.-8      	; 0xdb4 <strrev+0x4>
 dbc:	32 97       	sbiw	r30, 0x02	; 2
 dbe:	04 c0       	rjmp	.+8      	; 0xdc8 <strrev+0x18>
 dc0:	7c 91       	ld	r23, X
 dc2:	6d 93       	st	X+, r22
 dc4:	70 83       	st	Z, r23
 dc6:	62 91       	ld	r22, -Z
 dc8:	ae 17       	cp	r26, r30
 dca:	bf 07       	cpc	r27, r31
 dcc:	c8 f3       	brcs	.-14     	; 0xdc0 <strrev+0x10>
 dce:	08 95       	ret

00000dd0 <_exit>:
 dd0:	f8 94       	cli

00000dd2 <__stop_program>:
 dd2:	ff cf       	rjmp	.-2      	; 0xdd2 <__stop_program>
